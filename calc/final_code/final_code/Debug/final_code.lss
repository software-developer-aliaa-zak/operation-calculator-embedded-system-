
final_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fc2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00000fc2  00001036  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00001066  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001098  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000010d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001173  00000000  00000000  00001174  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000096c  00000000  00000000  000022e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000986  00000000  00000000  00002c53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  000035dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000428  00000000  00000000  0000376c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e0d  00000000  00000000  00003b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  000049a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ec       	ldi	r30, 0xC2	; 194
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 39       	cpi	r26, 0x90	; 144
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 36 02 	call	0x46c	; 0x46c <main>
  7a:	0c 94 df 07 	jmp	0xfbe	; 0xfbe <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Keypad_Scan>:
	DDRD=0xf0;
	PORTD=0xff;
}


unsigned char Keypad_Scan(){
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	a0 97       	sbiw	r28, 0x20	; 32
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	
	unsigned char Key[16]={ '1','4','7','C','2','5','8','0','3','6','9','.','+','-','*','='};
  96:	80 e1       	ldi	r24, 0x10	; 16
  98:	e0 e6       	ldi	r30, 0x60	; 96
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	de 01       	movw	r26, r28
  9e:	11 96       	adiw	r26, 0x01	; 1
  a0:	01 90       	ld	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	8a 95       	dec	r24
  a6:	e1 f7       	brne	.-8      	; 0xa0 <Keypad_Scan+0x1e>
	unsigned char Code[16] ={0xee,0xed,0xeb,0xe7,0xde,0xdd,0xdb,0xd7,0xbe,0xbd,0xbb,0xb7,0x7e,0x7d,0x7b,0x77}	;
  a8:	80 e1       	ldi	r24, 0x10	; 16
  aa:	e0 e7       	ldi	r30, 0x70	; 112
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	de 01       	movw	r26, r28
  b0:	51 96       	adiw	r26, 0x11	; 17
  b2:	01 90       	ld	r0, Z+
  b4:	0d 92       	st	X+, r0
  b6:	8a 95       	dec	r24
  b8:	e1 f7       	brne	.-8      	; 0xb2 <Keypad_Scan+0x30>
	unsigned char Button=0xff;
	while (Button==0xff)
	{
		DDRD=0x0f;
  ba:	5f e0       	ldi	r21, 0x0F	; 15
		PORTD=0xf0;
  bc:	40 ef       	ldi	r20, 0xF0	; 240
unsigned char Keypad_Scan(){
	
	unsigned char Key[16]={ '1','4','7','C','2','5','8','0','3','6','9','.','+','-','*','='};
	unsigned char Code[16] ={0xee,0xed,0xeb,0xe7,0xde,0xdd,0xdb,0xd7,0xbe,0xbd,0xbb,0xb7,0x7e,0x7d,0x7b,0x77}	;
	unsigned char Button=0xff;
	while (Button==0xff)
  be:	0f c0       	rjmp	.+30     	; 0xde <Keypad_Scan+0x5c>
		if (Button!=0xff)
		{
			
			for (int i=0;i<16;i++)
			{
				if (Button==Code[i])
  c0:	21 91       	ld	r18, Z+
  c2:	32 13       	cpse	r19, r18
  c4:	08 c0       	rjmp	.+16     	; 0xd6 <Keypad_Scan+0x54>
  c6:	02 c0       	rjmp	.+4      	; 0xcc <Keypad_Scan+0x4a>
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	90 e0       	ldi	r25, 0x00	; 0
				{
					return Key[i];
  cc:	fe 01       	movw	r30, r28
  ce:	e8 0f       	add	r30, r24
  d0:	f9 1f       	adc	r31, r25
  d2:	81 81       	ldd	r24, Z+1	; 0x01
  d4:	1d c0       	rjmp	.+58     	; 0x110 <Keypad_Scan+0x8e>
		
		
		if (Button!=0xff)
		{
			
			for (int i=0;i<16;i++)
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	80 31       	cpi	r24, 0x10	; 16
  da:	91 05       	cpc	r25, r1
  dc:	89 f7       	brne	.-30     	; 0xc0 <Keypad_Scan+0x3e>
	unsigned char Key[16]={ '1','4','7','C','2','5','8','0','3','6','9','.','+','-','*','='};
	unsigned char Code[16] ={0xee,0xed,0xeb,0xe7,0xde,0xdd,0xdb,0xd7,0xbe,0xbd,0xbb,0xb7,0x7e,0x7d,0x7b,0x77}	;
	unsigned char Button=0xff;
	while (Button==0xff)
	{
		DDRD=0x0f;
  de:	51 bb       	out	0x11, r21	; 17
		PORTD=0xf0;
  e0:	42 bb       	out	0x12, r20	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	8d e0       	ldi	r24, 0x0D	; 13
  e4:	8a 95       	dec	r24
  e6:	f1 f7       	brne	.-4      	; 0xe4 <Keypad_Scan+0x62>
  e8:	00 00       	nop
		_delay_us(5);
		Button=PIND;
  ea:	30 b3       	in	r19, 0x10	; 16
		
		DDRD=0xf0;
  ec:	41 bb       	out	0x11, r20	; 17
		PORTD=0x0f;
  ee:	52 bb       	out	0x12, r21	; 18
  f0:	8d e0       	ldi	r24, 0x0D	; 13
  f2:	8a 95       	dec	r24
  f4:	f1 f7       	brne	.-4      	; 0xf2 <Keypad_Scan+0x70>
  f6:	00 00       	nop
		_delay_us(5);
		Button= Button|PIND;
  f8:	80 b3       	in	r24, 0x10	; 16
  fa:	38 2b       	or	r19, r24
		
		
		if (Button!=0xff)
  fc:	3f 3f       	cpi	r19, 0xFF	; 255
  fe:	79 f3       	breq	.-34     	; 0xde <Keypad_Scan+0x5c>
		{
			
			for (int i=0;i<16;i++)
			{
				if (Button==Code[i])
 100:	89 89       	ldd	r24, Y+17	; 0x11
 102:	38 17       	cp	r19, r24
 104:	09 f3       	breq	.-62     	; 0xc8 <Keypad_Scan+0x46>
 106:	fe 01       	movw	r30, r28
 108:	72 96       	adiw	r30, 0x12	; 18
		
		
		if (Button!=0xff)
		{
			
			for (int i=0;i<16;i++)
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	d8 cf       	rjmp	.-80     	; 0xc0 <Keypad_Scan+0x3e>
				}
			}
		}
		Button=0xff;
	}
}
 110:	a0 96       	adiw	r28, 0x20	; 32
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	f8 94       	cli
 116:	de bf       	out	0x3e, r29	; 62
 118:	0f be       	out	0x3f, r0	; 63
 11a:	cd bf       	out	0x3d, r28	; 61
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <lcd_data_write>:



void lcd_data_write(char data)
{
	LCD_DATA_PORT =data;
 122:	88 bb       	out	0x18, r24	; 24
	LCD_CONT_PORT |= (1<<LCD_RS);
 124:	df 9a       	sbi	0x1b, 7	; 27
	LCD_CONT_PORT |= (1<<LCD_EN);
 126:	de 9a       	sbi	0x1b, 6	; 27
 128:	85 e0       	ldi	r24, 0x05	; 5
 12a:	8a 95       	dec	r24
 12c:	f1 f7       	brne	.-4      	; 0x12a <lcd_data_write+0x8>
 12e:	00 00       	nop
	_delay_us(2);
	LCD_CONT_PORT &= ~(1<<LCD_EN);
 130:	de 98       	cbi	0x1b, 6	; 27
 132:	87 ec       	ldi	r24, 0xC7	; 199
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <lcd_data_write+0x14>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <lcd_data_write+0x1a>
 13c:	00 00       	nop
 13e:	08 95       	ret

00000140 <lcd_command_write>:
}


void lcd_command_write(char command)
{
	LCD_DATA_PORT= command;
 140:	88 bb       	out	0x18, r24	; 24
	LCD_CONT_PORT &= ~(1<<LCD_RS);
 142:	df 98       	cbi	0x1b, 7	; 27
	LCD_CONT_PORT |= (1<<LCD_EN);
 144:	de 9a       	sbi	0x1b, 6	; 27
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	8a 95       	dec	r24
 14a:	f1 f7       	brne	.-4      	; 0x148 <lcd_command_write+0x8>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <lcd_command_write+0xe>
	_delay_us(1);
	LCD_CONT_PORT &= ~(1<<LCD_EN);
 14e:	de 98       	cbi	0x1b, 6	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 150:	8f e6       	ldi	r24, 0x6F	; 111
 152:	97 e1       	ldi	r25, 0x17	; 23
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <lcd_command_write+0x14>
 158:	00 c0       	rjmp	.+0      	; 0x15a <lcd_command_write+0x1a>
 15a:	00 00       	nop
 15c:	08 95       	ret

0000015e <lcd_init>:

}

void lcd_init()
{
	lcd_command_write(0x38);
 15e:	88 e3       	ldi	r24, 0x38	; 56
 160:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command_write>
	lcd_command_write(0x01);
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command_write>
	lcd_command_write(0x06);
 16a:	86 e0       	ldi	r24, 0x06	; 6
 16c:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command_write>
	lcd_command_write(0x0e);
 170:	8e e0       	ldi	r24, 0x0E	; 14
 172:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command_write>
 176:	08 95       	ret

00000178 <lcd_string_write>:
}

void lcd_string_write(char *string)
{
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	ec 01       	movw	r28, r24
	while (*string)
 17e:	88 81       	ld	r24, Y
 180:	88 23       	and	r24, r24
 182:	31 f0       	breq	.+12     	; 0x190 <lcd_string_write+0x18>
 184:	21 96       	adiw	r28, 0x01	; 1
	lcd_data_write(*string++);
 186:	0e 94 91 00 	call	0x122	; 0x122 <lcd_data_write>
	lcd_command_write(0x0e);
}

void lcd_string_write(char *string)
{
	while (*string)
 18a:	89 91       	ld	r24, Y+
 18c:	81 11       	cpse	r24, r1
 18e:	fb cf       	rjmp	.-10     	; 0x186 <lcd_string_write+0xe>
	lcd_data_write(*string++);
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <lcd_CLR>:
 196:	8f e1       	ldi	r24, 0x1F	; 31
 198:	9e e4       	ldi	r25, 0x4E	; 78
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_CLR+0x4>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lcd_CLR+0xa>
 1a0:	00 00       	nop

void lcd_CLR(){
	_delay_ms(10);
	lcd_command_write(0x01);
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a8:	9a e1       	ldi	r25, 0x1A	; 26
 1aa:	9a 95       	dec	r25
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_CLR+0x14>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_CLR+0x1a>
 1b0:	08 95       	ret

000001b2 <lcd_GoHome>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b2:	8f e1       	ldi	r24, 0x1F	; 31
 1b4:	9e e4       	ldi	r25, 0x4E	; 78
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <lcd_GoHome+0x4>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <lcd_GoHome+0xa>
 1bc:	00 00       	nop
}

void lcd_GoHome(){
	
	_delay_ms(10);
	lcd_command_write(0x02);
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command_write>
 1c4:	8f e9       	ldi	r24, 0x9F	; 159
 1c6:	9f e0       	ldi	r25, 0x0F	; 15
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_GoHome+0x16>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <lcd_GoHome+0x1c>
 1ce:	00 00       	nop
 1d0:	08 95       	ret

000001d2 <lcd_SetCursor>:
	_delay_ms(2);
	
}

void lcd_SetCursor(unsigned char x , unsigned char y){
 1d2:	0f 93       	push	r16
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	08 2f       	mov	r16, r24
 1dc:	c6 2f       	mov	r28, r22
	
	lcd_GoHome();
 1de:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_GoHome>
	if (y==0){
 1e2:	c1 11       	cpse	r28, r1
 1e4:	12 c0       	rjmp	.+36     	; 0x20a <lcd_SetCursor+0x38>
		for (int H=0;H<x;H++){
 1e6:	10 e0       	ldi	r17, 0x00	; 0
 1e8:	10 16       	cp	r1, r16
 1ea:	11 06       	cpc	r1, r17
 1ec:	04 f5       	brge	.+64     	; 0x22e <lcd_SetCursor+0x5c>
 1ee:	c0 e0       	ldi	r28, 0x00	; 0
 1f0:	d0 e0       	ldi	r29, 0x00	; 0
			lcd_command_write(0x14);
 1f2:	84 e1       	ldi	r24, 0x14	; 20
 1f4:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f8:	85 e8       	ldi	r24, 0x85	; 133
 1fa:	8a 95       	dec	r24
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <lcd_SetCursor+0x28>
 1fe:	00 00       	nop

void lcd_SetCursor(unsigned char x , unsigned char y){
	
	lcd_GoHome();
	if (y==0){
		for (int H=0;H<x;H++){
 200:	21 96       	adiw	r28, 0x01	; 1
 202:	c0 17       	cp	r28, r16
 204:	d1 07       	cpc	r29, r17
 206:	a9 f7       	brne	.-22     	; 0x1f2 <lcd_SetCursor+0x20>
 208:	12 c0       	rjmp	.+36     	; 0x22e <lcd_SetCursor+0x5c>
			lcd_command_write(0x14);
			_delay_us(50);
		}
	}
	else if(y==1){
 20a:	c1 30       	cpi	r28, 0x01	; 1
 20c:	81 f4       	brne	.+32     	; 0x22e <lcd_SetCursor+0x5c>
		for (int H=0;H<(x+40);H++){
 20e:	10 e0       	ldi	r17, 0x00	; 0
 210:	08 5d       	subi	r16, 0xD8	; 216
 212:	1f 4f       	sbci	r17, 0xFF	; 255
 214:	c0 e0       	ldi	r28, 0x00	; 0
 216:	d0 e0       	ldi	r29, 0x00	; 0
			lcd_command_write(0x14);
 218:	84 e1       	ldi	r24, 0x14	; 20
 21a:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command_write>
 21e:	85 e8       	ldi	r24, 0x85	; 133
 220:	8a 95       	dec	r24
 222:	f1 f7       	brne	.-4      	; 0x220 <lcd_SetCursor+0x4e>
 224:	00 00       	nop
			lcd_command_write(0x14);
			_delay_us(50);
		}
	}
	else if(y==1){
		for (int H=0;H<(x+40);H++){
 226:	21 96       	adiw	r28, 0x01	; 1
 228:	c0 17       	cp	r28, r16
 22a:	d1 07       	cpc	r29, r17
 22c:	ac f3       	brlt	.-22     	; 0x218 <lcd_SetCursor+0x46>
			lcd_command_write(0x14);
			_delay_us(50);
		}
	}
}
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	1f 91       	pop	r17
 234:	0f 91       	pop	r16
 236:	08 95       	ret

00000238 <lcd_Print_Num>:


void lcd_Print_Num(float Num)
{
 238:	2f 92       	push	r2
 23a:	3f 92       	push	r3
 23c:	4f 92       	push	r4
 23e:	5f 92       	push	r5
 240:	6f 92       	push	r6
 242:	7f 92       	push	r7
 244:	8f 92       	push	r8
 246:	9f 92       	push	r9
 248:	af 92       	push	r10
 24a:	bf 92       	push	r11
 24c:	cf 92       	push	r12
 24e:	df 92       	push	r13
 250:	ef 92       	push	r14
 252:	ff 92       	push	r15
 254:	0f 93       	push	r16
 256:	1f 93       	push	r17
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	cd b7       	in	r28, 0x3d	; 61
 25e:	de b7       	in	r29, 0x3e	; 62
 260:	6a 97       	sbiw	r28, 0x1a	; 26
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	f8 94       	cli
 266:	de bf       	out	0x3e, r29	; 62
 268:	0f be       	out	0x3f, r0	; 63
 26a:	cd bf       	out	0x3d, r28	; 61
 26c:	4b 01       	movw	r8, r22
 26e:	5c 01       	movw	r10, r24
	long int H_Num=0;
	float L_Num=0.0;
	signed char i=0,Polr=0,L=0;
	unsigned char N[16],N_L[10];
	/* ------------------------------------(Num==0)--------------------------------------------*/
	if (Num==0)
 270:	20 e0       	ldi	r18, 0x00	; 0
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	a9 01       	movw	r20, r18
 276:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__cmpsf2>
 27a:	81 11       	cpse	r24, r1
 27c:	04 c0       	rjmp	.+8      	; 0x286 <lcd_Print_Num+0x4e>
	{
		lcd_data_write('0');
 27e:	80 e3       	ldi	r24, 0x30	; 48
 280:	0e 94 91 00 	call	0x122	; 0x122 <lcd_data_write>
 284:	da c0       	rjmp	.+436    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
	
	/* ------------------------------------(Num!=0)--------------------------------------------*/
	else
	{
		/* ---------------------------------(Num<0)--------------------------------------------*/
		if (Num<0)
 286:	20 e0       	ldi	r18, 0x00	; 0
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	a9 01       	movw	r20, r18
 28c:	c5 01       	movw	r24, r10
 28e:	b4 01       	movw	r22, r8
 290:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__cmpsf2>
 294:	88 23       	and	r24, r24
 296:	0c f0       	brlt	.+2      	; 0x29a <lcd_Print_Num+0x62>
 298:	a6 c0       	rjmp	.+332    	; 0x3e6 <lcd_Print_Num+0x1ae>
		{
			Num*= -1;
 29a:	b7 fa       	bst	r11, 7
 29c:	b0 94       	com	r11
 29e:	b7 f8       	bld	r11, 7
 2a0:	b0 94       	com	r11
			Polr=1;
 2a2:	22 24       	eor	r2, r2
 2a4:	23 94       	inc	r2
 2a6:	a0 c0       	rjmp	.+320    	; 0x3e8 <lcd_Print_Num+0x1b0>
		if (L_Num>0)
		{
			/* -------------------------------(L<=4)--------------------------------------------*/
			while(L<=4)
			{
				L_Num*=10;
 2a8:	20 e0       	ldi	r18, 0x00	; 0
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	40 e2       	ldi	r20, 0x20	; 32
 2ae:	51 e4       	ldi	r21, 0x41	; 65
 2b0:	c3 01       	movw	r24, r6
 2b2:	b2 01       	movw	r22, r4
 2b4:	0e 94 31 07 	call	0xe62	; 0xe62 <__mulsf3>
 2b8:	2b 01       	movw	r4, r22
 2ba:	3c 01       	movw	r6, r24
				N_L[L+5]=48;
 2bc:	d5 01       	movw	r26, r10
 2be:	15 96       	adiw	r26, 0x05	; 5
 2c0:	3c 92       	st	X, r3
				N_L[L]=((int)L_Num)+48;
 2c2:	0e 94 44 06 	call	0xc88	; 0xc88 <__fixsfsi>
 2c6:	60 5d       	subi	r22, 0xD0	; 208
 2c8:	f5 01       	movw	r30, r10
 2ca:	61 93       	st	Z+, r22
 2cc:	5f 01       	movw	r10, r30
				L_Num=L_Num-N_L[L]+48;
 2ce:	70 e0       	ldi	r23, 0x00	; 0
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__floatsisf>
 2d8:	9b 01       	movw	r18, r22
 2da:	ac 01       	movw	r20, r24
 2dc:	c3 01       	movw	r24, r6
 2de:	b2 01       	movw	r22, r4
 2e0:	0e 94 60 05 	call	0xac0	; 0xac0 <__subsf3>
 2e4:	20 e0       	ldi	r18, 0x00	; 0
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	40 e4       	ldi	r20, 0x40	; 64
 2ea:	52 e4       	ldi	r21, 0x42	; 66
 2ec:	0e 94 61 05 	call	0xac2	; 0xac2 <__addsf3>
 2f0:	2b 01       	movw	r4, r22
 2f2:	3c 01       	movw	r6, r24
		
		/* ---------------------------------(L_Num>0)-------------------------------------------*/
		if (L_Num>0)
		{
			/* -------------------------------(L<=4)--------------------------------------------*/
			while(L<=4)
 2f4:	a0 16       	cp	r10, r16
 2f6:	b1 06       	cpc	r11, r17
 2f8:	b9 f6       	brne	.-82     	; 0x2a8 <lcd_Print_Num+0x70>
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	01 50       	subi	r16, 0x01	; 1
 2fe:	11 09       	sbc	r17, r1
 300:	f8 01       	movw	r30, r16
			/* ---------------------------------------------------------------------------------*/
			
			/* ---------------------------------------------------------------------------------*/
			for (L--;L>=0;L--)
			{
				if( N_L[L]!=48 || N_L[L+1]!=48 || N_L[L+2]!=48 ||N_L[L+3]!=48 ||N_L[L+4]!=48)
 302:	90 81       	ld	r25, Z
 304:	90 33       	cpi	r25, 0x30	; 48
 306:	61 f4       	brne	.+24     	; 0x320 <lcd_Print_Num+0xe8>
 308:	21 81       	ldd	r18, Z+1	; 0x01
 30a:	20 33       	cpi	r18, 0x30	; 48
 30c:	49 f4       	brne	.+18     	; 0x320 <lcd_Print_Num+0xe8>
 30e:	22 81       	ldd	r18, Z+2	; 0x02
 310:	20 33       	cpi	r18, 0x30	; 48
 312:	31 f4       	brne	.+12     	; 0x320 <lcd_Print_Num+0xe8>
 314:	23 81       	ldd	r18, Z+3	; 0x03
 316:	20 33       	cpi	r18, 0x30	; 48
 318:	19 f4       	brne	.+6      	; 0x320 <lcd_Print_Num+0xe8>
 31a:	24 81       	ldd	r18, Z+4	; 0x04
 31c:	20 33       	cpi	r18, 0x30	; 48
 31e:	51 f0       	breq	.+20     	; 0x334 <lcd_Print_Num+0xfc>
				{
					
					N[i]=N_L[L];
 320:	e1 e0       	ldi	r30, 0x01	; 1
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	ec 0f       	add	r30, r28
 326:	fd 1f       	adc	r31, r29
 328:	e8 0f       	add	r30, r24
 32a:	f1 1d       	adc	r31, r1
 32c:	87 fd       	sbrc	r24, 7
 32e:	fa 95       	dec	r31
 330:	90 83       	st	Z, r25
					i++;
 332:	8f 5f       	subi	r24, 0xFF	; 255
				L++;
			}
			/* ---------------------------------------------------------------------------------*/
			
			/* ---------------------------------------------------------------------------------*/
			for (L--;L>=0;L--)
 334:	80 16       	cp	r8, r16
 336:	91 06       	cpc	r9, r17
 338:	09 f7       	brne	.-62     	; 0x2fc <lcd_Print_Num+0xc4>
				}
				
			}
			/* ---------------------------------------------------------------------------------*/
			
			N[i]=46; //  46=.
 33a:	fe 01       	movw	r30, r28
 33c:	e8 0f       	add	r30, r24
 33e:	f1 1d       	adc	r31, r1
 340:	87 fd       	sbrc	r24, 7
 342:	fa 95       	dec	r31
 344:	9e e2       	ldi	r25, 0x2E	; 46
 346:	91 83       	std	Z+1, r25	; 0x01
			i++;
 348:	11 e0       	ldi	r17, 0x01	; 1
 34a:	18 0f       	add	r17, r24
 34c:	01 c0       	rjmp	.+2      	; 0x350 <lcd_Print_Num+0x118>

void lcd_Print_Num(float Num)
{
	long int H_Num=0;
	float L_Num=0.0;
	signed char i=0,Polr=0,L=0;
 34e:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}
		/* -------------------------------------------------------------------------------------*/
		
		/* -------------------------------------------------------------------------------------*/
		while(H_Num!=0)
 350:	c1 14       	cp	r12, r1
 352:	d1 04       	cpc	r13, r1
 354:	e1 04       	cpc	r14, r1
 356:	f1 04       	cpc	r15, r1
 358:	19 f1       	breq	.+70     	; 0x3a0 <lcd_Print_Num+0x168>
		{
			N[i]=(H_Num%10)+48;
 35a:	0f 2e       	mov	r0, r31
 35c:	fa e0       	ldi	r31, 0x0A	; 10
 35e:	4f 2e       	mov	r4, r31
 360:	51 2c       	mov	r5, r1
 362:	61 2c       	mov	r6, r1
 364:	71 2c       	mov	r7, r1
 366:	f0 2d       	mov	r31, r0
 368:	aa 24       	eor	r10, r10
 36a:	a3 94       	inc	r10
 36c:	b1 2c       	mov	r11, r1
 36e:	ac 0e       	add	r10, r28
 370:	bd 1e       	adc	r11, r29
 372:	a1 0e       	add	r10, r17
 374:	b1 1c       	adc	r11, r1
 376:	17 fd       	sbrc	r17, 7
 378:	ba 94       	dec	r11
 37a:	c7 01       	movw	r24, r14
 37c:	b6 01       	movw	r22, r12
 37e:	a3 01       	movw	r20, r6
 380:	92 01       	movw	r18, r4
 382:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__divmodsi4>
 386:	60 5d       	subi	r22, 0xD0	; 208
 388:	d5 01       	movw	r26, r10
 38a:	6c 93       	st	X, r22
			H_Num/=10;
 38c:	c2 2e       	mov	r12, r18
 38e:	d3 2e       	mov	r13, r19
 390:	e4 2e       	mov	r14, r20
 392:	f5 2e       	mov	r15, r21
 394:	1f 5f       	subi	r17, 0xFF	; 255
			i++;
		}
		/* -------------------------------------------------------------------------------------*/
		
		/* -------------------------------------------------------------------------------------*/
		while(H_Num!=0)
 396:	c1 14       	cp	r12, r1
 398:	d1 04       	cpc	r13, r1
 39a:	e1 04       	cpc	r14, r1
 39c:	f1 04       	cpc	r15, r1
 39e:	21 f7       	brne	.-56     	; 0x368 <lcd_Print_Num+0x130>
			i++;
		}
		/* --------------------------------------------------------------------------------------*/
		
		/* --------------------------------------------------------------------------------------*/
		if (Polr==1)
 3a0:	b1 e0       	ldi	r27, 0x01	; 1
 3a2:	2b 12       	cpse	r2, r27
 3a4:	08 c0       	rjmp	.+16     	; 0x3b6 <lcd_Print_Num+0x17e>
		{
			N[i]=45;// 45=-
 3a6:	fe 01       	movw	r30, r28
 3a8:	e1 0f       	add	r30, r17
 3aa:	f1 1d       	adc	r31, r1
 3ac:	17 fd       	sbrc	r17, 7
 3ae:	fa 95       	dec	r31
 3b0:	8d e2       	ldi	r24, 0x2D	; 45
 3b2:	81 83       	std	Z+1, r24	; 0x01
			i++;
 3b4:	1f 5f       	subi	r17, 0xFF	; 255
		}
		/* ---------------------------------------------------------------------------------------*/
		i--;
 3b6:	11 50       	subi	r17, 0x01	; 1
		/* ---------------------------------------------------------------------------------------*/
		while(i>=0)
 3b8:	0a f4       	brpl	.+2      	; 0x3bc <lcd_Print_Num+0x184>
 3ba:	3f c0       	rjmp	.+126    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
		{
			lcd_data_write(N[i]);
 3bc:	e1 e0       	ldi	r30, 0x01	; 1
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	ec 0f       	add	r30, r28
 3c2:	fd 1f       	adc	r31, r29
 3c4:	e1 0f       	add	r30, r17
 3c6:	f1 1d       	adc	r31, r1
 3c8:	17 fd       	sbrc	r17, 7
 3ca:	fa 95       	dec	r31
 3cc:	80 81       	ld	r24, Z
 3ce:	0e 94 91 00 	call	0x122	; 0x122 <lcd_data_write>
 3d2:	11 50       	subi	r17, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d4:	ef ec       	ldi	r30, 0xCF	; 207
 3d6:	f7 e0       	ldi	r31, 0x07	; 7
 3d8:	31 97       	sbiw	r30, 0x01	; 1
 3da:	f1 f7       	brne	.-4      	; 0x3d8 <lcd_Print_Num+0x1a0>
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <lcd_Print_Num+0x1a6>
 3de:	00 00       	nop
			i++;
		}
		/* ---------------------------------------------------------------------------------------*/
		i--;
		/* ---------------------------------------------------------------------------------------*/
		while(i>=0)
 3e0:	11 23       	and	r17, r17
 3e2:	64 f7       	brge	.-40     	; 0x3bc <lcd_Print_Num+0x184>
 3e4:	2a c0       	rjmp	.+84     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>

void lcd_Print_Num(float Num)
{
	long int H_Num=0;
	float L_Num=0.0;
	signed char i=0,Polr=0,L=0;
 3e6:	21 2c       	mov	r2, r1
			Num*= -1;
			Polr=1;
		}
		/* -------------------------------------------------------------------------------------*/
		
		H_Num=(int)Num;
 3e8:	c5 01       	movw	r24, r10
 3ea:	b4 01       	movw	r22, r8
 3ec:	0e 94 44 06 	call	0xc88	; 0xc88 <__fixsfsi>
 3f0:	6b 01       	movw	r12, r22
 3f2:	77 0f       	add	r23, r23
 3f4:	ee 08       	sbc	r14, r14
 3f6:	ff 08       	sbc	r15, r15
		
		L_Num=(Num-H_Num);
 3f8:	c7 01       	movw	r24, r14
 3fa:	b6 01       	movw	r22, r12
 3fc:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__floatsisf>
 400:	9b 01       	movw	r18, r22
 402:	ac 01       	movw	r20, r24
 404:	c5 01       	movw	r24, r10
 406:	b4 01       	movw	r22, r8
 408:	0e 94 60 05 	call	0xac0	; 0xac0 <__subsf3>
 40c:	2b 01       	movw	r4, r22
 40e:	3c 01       	movw	r6, r24
		
		/* ---------------------------------(L_Num>0)-------------------------------------------*/
		if (L_Num>0)
 410:	20 e0       	ldi	r18, 0x00	; 0
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	a9 01       	movw	r20, r18
 416:	0e 94 2c 07 	call	0xe58	; 0xe58 <__gesf2>
 41a:	18 16       	cp	r1, r24
 41c:	0c f0       	brlt	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 41e:	97 cf       	rjmp	.-210    	; 0x34e <lcd_Print_Num+0x116>
 420:	4e 01       	movw	r8, r28
 422:	f1 e1       	ldi	r31, 0x11	; 17
 424:	8f 0e       	add	r8, r31
 426:	91 1c       	adc	r9, r1
 428:	8e 01       	movw	r16, r28
 42a:	0a 5e       	subi	r16, 0xEA	; 234
 42c:	1f 4f       	sbci	r17, 0xFF	; 255
 42e:	54 01       	movw	r10, r8
		{
			/* -------------------------------(L<=4)--------------------------------------------*/
			while(L<=4)
			{
				L_Num*=10;
				N_L[L+5]=48;
 430:	0f 2e       	mov	r0, r31
 432:	f0 e3       	ldi	r31, 0x30	; 48
 434:	3f 2e       	mov	r3, r31
 436:	f0 2d       	mov	r31, r0
 438:	37 cf       	rjmp	.-402    	; 0x2a8 <lcd_Print_Num+0x70>
			_delay_ms(1);
		}
		/* ---------------------------------------------------------------------------------------*/

	}
}
 43a:	6a 96       	adiw	r28, 0x1a	; 26
 43c:	0f b6       	in	r0, 0x3f	; 63
 43e:	f8 94       	cli
 440:	de bf       	out	0x3e, r29	; 62
 442:	0f be       	out	0x3f, r0	; 63
 444:	cd bf       	out	0x3d, r28	; 61
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	1f 91       	pop	r17
 44c:	0f 91       	pop	r16
 44e:	ff 90       	pop	r15
 450:	ef 90       	pop	r14
 452:	df 90       	pop	r13
 454:	cf 90       	pop	r12
 456:	bf 90       	pop	r11
 458:	af 90       	pop	r10
 45a:	9f 90       	pop	r9
 45c:	8f 90       	pop	r8
 45e:	7f 90       	pop	r7
 460:	6f 90       	pop	r6
 462:	5f 90       	pop	r5
 464:	4f 90       	pop	r4
 466:	3f 90       	pop	r3
 468:	2f 90       	pop	r2
 46a:	08 95       	ret

0000046c <main>:
#include <util/delay.h>

#include "common.h"

int main(void)
{
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
 470:	cd b7       	in	r28, 0x3d	; 61
 472:	de b7       	in	r29, 0x3e	; 62
 474:	c6 58       	subi	r28, 0x86	; 134
 476:	d1 09       	sbc	r29, r1
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	f8 94       	cli
 47c:	de bf       	out	0x3e, r29	; 62
 47e:	0f be       	out	0x3f, r0	; 63
 480:	cd bf       	out	0x3d, r28	; 61
	DDRB=0xff;
 482:	8f ef       	ldi	r24, 0xFF	; 255
 484:	87 bb       	out	0x17, r24	; 23
	DDRA = 0xFF;
 486:	8a bb       	out	0x1a, r24	; 26

	lcd_init();
 488:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_init>
	lcd_CLR();
 48c:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_CLR>
 490:	2f ef       	ldi	r18, 0xFF	; 255
 492:	82 e5       	ldi	r24, 0x52	; 82
 494:	97 e0       	ldi	r25, 0x07	; 7
 496:	21 50       	subi	r18, 0x01	; 1
 498:	80 40       	sbci	r24, 0x00	; 0
 49a:	90 40       	sbci	r25, 0x00	; 0
 49c:	e1 f7       	brne	.-8      	; 0x496 <main+0x2a>
 49e:	00 c0       	rjmp	.+0      	; 0x4a0 <main+0x34>
 4a0:	00 00       	nop
	
	_delay_ms(300);
	lcd_string_write("Press any key ");
 4a2:	80 e8       	ldi	r24, 0x80	; 128
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_string_write>
	while(1)
	{
		unsigned char x;
		unsigned char y=0 , i=0 ;
		float Pow=1;
		float Num[16] , Num1[16]={0,0,0,0,0,0};
 4aa:	fe 01       	movw	r30, r28
 4ac:	31 96       	adiw	r30, 0x01	; 1
 4ae:	2f 01       	movw	r4, r30
				else if (Num1[a]==(-3)&& Num1[a+1]==1)   // '-' =45-48=-3
				{
					Sum-=Num1[a+2];
					a+=2;
				}
				else if (Num1[a]==(-1)&& Num1[a+1]==1)  // '/' =47-48=-1
 4b0:	21 2c       	mov	r2, r1
 4b2:	31 2c       	mov	r3, r1
					else
					{
						N++;
						Num1[N]=Num[i];
						N++;
						Num1[N]=1;     // this step is an using requirement in the next  for loop to ensure that not enter two symbols together (12+*3  error)
 4b4:	cd 57       	subi	r28, 0x7D	; 125
 4b6:	df 4f       	sbci	r29, 0xFF	; 255
 4b8:	28 82       	st	Y, r2
 4ba:	c3 58       	subi	r28, 0x83	; 131
 4bc:	d0 40       	sbci	r29, 0x00	; 0
 4be:	cc 57       	subi	r28, 0x7C	; 124
 4c0:	df 4f       	sbci	r29, 0xFF	; 255
 4c2:	38 82       	st	Y, r3
 4c4:	c4 58       	subi	r28, 0x84	; 132
 4c6:	d0 40       	sbci	r29, 0x00	; 0
 4c8:	f0 e8       	ldi	r31, 0x80	; 128
 4ca:	cb 57       	subi	r28, 0x7B	; 123
 4cc:	df 4f       	sbci	r29, 0xFF	; 255
 4ce:	f8 83       	st	Y, r31
 4d0:	c5 58       	subi	r28, 0x85	; 133
 4d2:	d0 40       	sbci	r29, 0x00	; 0
 4d4:	2f e3       	ldi	r18, 0x3F	; 63
 4d6:	ca 57       	subi	r28, 0x7A	; 122
 4d8:	df 4f       	sbci	r29, 0xFF	; 255
 4da:	28 83       	st	Y, r18
 4dc:	c6 58       	subi	r28, 0x86	; 134
 4de:	d0 40       	sbci	r29, 0x00	; 0
	while(1)
	{
		unsigned char x;
		unsigned char y=0 , i=0 ;
		float Pow=1;
		float Num[16] , Num1[16]={0,0,0,0,0,0};
 4e0:	f2 01       	movw	r30, r4
 4e2:	20 e4       	ldi	r18, 0x40	; 64
 4e4:	11 92       	st	Z+, r1
 4e6:	2a 95       	dec	r18
 4e8:	e9 f7       	brne	.-6      	; 0x4e4 <main+0x78>
		float Sum=0.0;
		
		x=Keypad_Scan();
 4ea:	0e 94 41 00 	call	0x82	; 0x82 <Keypad_Scan>
 4ee:	18 2f       	mov	r17, r24
		lcd_CLR();
 4f0:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_CLR>
 4f4:	8f ef       	ldi	r24, 0xFF	; 255
 4f6:	92 e5       	ldi	r25, 0x52	; 82
 4f8:	e7 e0       	ldi	r30, 0x07	; 7
 4fa:	81 50       	subi	r24, 0x01	; 1
 4fc:	90 40       	sbci	r25, 0x00	; 0
 4fe:	e0 40       	sbci	r30, 0x00	; 0
 500:	e1 f7       	brne	.-8      	; 0x4fa <main+0x8e>
 502:	00 c0       	rjmp	.+0      	; 0x504 <main+0x98>
 504:	00 00       	nop
		_delay_ms(300);
		
		
		while(x)
 506:	11 23       	and	r17, r17
 508:	59 f3       	breq	.-42     	; 0x4e0 <main+0x74>
 50a:	00 e0       	ldi	r16, 0x00	; 0
		{ 
			
			while(y!='=')
			{  
				y=Keypad_Scan();
 50c:	0e 94 41 00 	call	0x82	; 0x82 <Keypad_Scan>
 510:	18 2f       	mov	r17, r24
				
				lcd_data_write(y);
 512:	0e 94 91 00 	call	0x122	; 0x122 <lcd_data_write>
					
				Num[i]=y-48;
 516:	61 2f       	mov	r22, r17
 518:	70 e0       	ldi	r23, 0x00	; 0
 51a:	60 53       	subi	r22, 0x30	; 48
 51c:	71 09       	sbc	r23, r1
 51e:	07 2e       	mov	r0, r23
 520:	00 0c       	add	r0, r0
 522:	88 0b       	sbc	r24, r24
 524:	99 0b       	sbc	r25, r25
 526:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__floatsisf>
 52a:	e1 e4       	ldi	r30, 0x41	; 65
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	ec 0f       	add	r30, r28
 530:	fd 1f       	adc	r31, r29
 532:	24 e0       	ldi	r18, 0x04	; 4
 534:	02 9f       	mul	r16, r18
 536:	e0 0d       	add	r30, r0
 538:	f1 1d       	adc	r31, r1
 53a:	11 24       	eor	r1, r1
 53c:	60 83       	st	Z, r22
 53e:	71 83       	std	Z+1, r23	; 0x01
 540:	82 83       	std	Z+2, r24	; 0x02
 542:	93 83       	std	Z+3, r25	; 0x03
				if (Num[i]==('C'-48))  // clear
 544:	20 e0       	ldi	r18, 0x00	; 0
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	48 e9       	ldi	r20, 0x98	; 152
 54a:	51 e4       	ldi	r21, 0x41	; 65
 54c:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__cmpsf2>
 550:	81 11       	cpse	r24, r1
 552:	1b c0       	rjmp	.+54     	; 0x58a <main+0x11e>
				{
					// start from the value of i and clear each element step by step moving to left
					i--;
 554:	ff 24       	eor	r15, r15
 556:	fa 94       	dec	r15
 558:	f0 0e       	add	r15, r16
					lcd_SetCursor(i,0);
 55a:	60 e0       	ldi	r22, 0x00	; 0
 55c:	8f 2d       	mov	r24, r15
 55e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_SetCursor>
					lcd_data_write(' ');
 562:	80 e2       	ldi	r24, 0x20	; 32
 564:	0e 94 91 00 	call	0x122	; 0x122 <lcd_data_write>
					lcd_data_write(' ');
 568:	80 e2       	ldi	r24, 0x20	; 32
 56a:	0e 94 91 00 	call	0x122	; 0x122 <lcd_data_write>
					lcd_SetCursor(i,0);
 56e:	60 e0       	ldi	r22, 0x00	; 0
 570:	8f 2d       	mov	r24, r15
 572:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_SetCursor>
					i--;
 576:	02 50       	subi	r16, 0x02	; 2
 578:	8f ef       	ldi	r24, 0xFF	; 255
 57a:	90 e7       	ldi	r25, 0x70	; 112
 57c:	e2 e0       	ldi	r30, 0x02	; 2
 57e:	81 50       	subi	r24, 0x01	; 1
 580:	90 40       	sbci	r25, 0x00	; 0
 582:	e0 40       	sbci	r30, 0x00	; 0
 584:	e1 f7       	brne	.-8      	; 0x57e <main+0x112>
 586:	00 c0       	rjmp	.+0      	; 0x588 <main+0x11c>
 588:	00 00       	nop
 58a:	ff e7       	ldi	r31, 0x7F	; 127
 58c:	28 e3       	ldi	r18, 0x38	; 56
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	f1 50       	subi	r31, 0x01	; 1
 592:	20 40       	sbci	r18, 0x00	; 0
 594:	80 40       	sbci	r24, 0x00	; 0
 596:	e1 f7       	brne	.-8      	; 0x590 <main+0x124>
 598:	00 c0       	rjmp	.+0      	; 0x59a <main+0x12e>
 59a:	00 00       	nop
					_delay_ms(100);
				}
				_delay_ms(50);
				i++;
 59c:	0f 5f       	subi	r16, 0xFF	; 255
 59e:	9f ef       	ldi	r25, 0xFF	; 255
 5a0:	e3 ec       	ldi	r30, 0xC3	; 195
 5a2:	f9 e0       	ldi	r31, 0x09	; 9
 5a4:	91 50       	subi	r25, 0x01	; 1
 5a6:	e0 40       	sbci	r30, 0x00	; 0
 5a8:	f0 40       	sbci	r31, 0x00	; 0
 5aa:	e1 f7       	brne	.-8      	; 0x5a4 <main+0x138>
 5ac:	00 c0       	rjmp	.+0      	; 0x5ae <main+0x142>
 5ae:	00 00       	nop
		
		
		while(x)
		{ 
			
			while(y!='=')
 5b0:	1d 33       	cpi	r17, 0x3D	; 61
 5b2:	09 f0       	breq	.+2      	; 0x5b6 <main+0x14a>
 5b4:	ab cf       	rjmp	.-170    	; 0x50c <main+0xa0>
				_delay_ms(400);  //FOR scanning keypad

			} 
			i=0;
			unsigned char N=0;
			while (Num[i]!=13)  // '=' =61-48=13
 5b6:	25 96       	adiw	r28, 0x05	; 5
 5b8:	cc ac       	ldd	r12, Y+60	; 0x3c
 5ba:	dd ac       	ldd	r13, Y+61	; 0x3d
 5bc:	ee ac       	ldd	r14, Y+62	; 0x3e
 5be:	ff ac       	ldd	r15, Y+63	; 0x3f
 5c0:	25 97       	sbiw	r28, 0x05	; 5
 5c2:	20 e0       	ldi	r18, 0x00	; 0
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	40 e5       	ldi	r20, 0x50	; 80
 5c8:	51 e4       	ldi	r21, 0x41	; 65
 5ca:	c7 01       	movw	r24, r14
 5cc:	b6 01       	movw	r22, r12
 5ce:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__cmpsf2>
 5d2:	88 23       	and	r24, r24
 5d4:	09 f4       	brne	.+2      	; 0x5d8 <main+0x16c>
 5d6:	ee c0       	rjmp	.+476    	; 0x7b4 <main+0x348>
 5d8:	a1 2c       	mov	r10, r1
 5da:	92 2c       	mov	r9, r2
 5dc:	83 2c       	mov	r8, r3
 5de:	68 94       	set
 5e0:	77 24       	eor	r7, r7
 5e2:	77 f8       	bld	r7, 7
 5e4:	0f 2e       	mov	r0, r31
 5e6:	ff e3       	ldi	r31, 0x3F	; 63
 5e8:	6f 2e       	mov	r6, r31
 5ea:	f0 2d       	mov	r31, r0
 5ec:	b1 2c       	mov	r11, r1
 5ee:	1a 2d       	mov	r17, r10
 5f0:	cb 57       	subi	r28, 0x7B	; 123
 5f2:	df 4f       	sbci	r29, 0xFF	; 255
 5f4:	a8 80       	ld	r10, Y
 5f6:	c5 58       	subi	r28, 0x85	; 133
 5f8:	d0 40       	sbci	r29, 0x00	; 0
 5fa:	ca 57       	subi	r28, 0x7A	; 122
 5fc:	df 4f       	sbci	r29, 0xFF	; 255
 5fe:	08 81       	ld	r16, Y
 600:	c6 58       	subi	r28, 0x86	; 134
 602:	d0 40       	sbci	r29, 0x00	; 0
				// 12.5*1+2-3=11.5
				// 12.5+2-4*2=21       solving the first mathematical operation then next els.
				//                     doesn't use the periority of operations
				
				// in case the value of Num[i] is number between 0 and 9
				if (Num[i]>=0 && Num[i]<=9)
 604:	20 e0       	ldi	r18, 0x00	; 0
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	40 e0       	ldi	r20, 0x00	; 0
 60a:	50 e0       	ldi	r21, 0x00	; 0
 60c:	c7 01       	movw	r24, r14
 60e:	b6 01       	movw	r22, r12
 610:	0e 94 2c 07 	call	0xe58	; 0xe58 <__gesf2>
 614:	88 23       	and	r24, r24
 616:	0c f4       	brge	.+2      	; 0x61a <main+0x1ae>
 618:	68 c0       	rjmp	.+208    	; 0x6ea <main+0x27e>
 61a:	20 e0       	ldi	r18, 0x00	; 0
 61c:	30 e0       	ldi	r19, 0x00	; 0
 61e:	40 e1       	ldi	r20, 0x10	; 16
 620:	51 e4       	ldi	r21, 0x41	; 65
 622:	c7 01       	movw	r24, r14
 624:	b6 01       	movw	r22, r12
 626:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__cmpsf2>
 62a:	18 16       	cp	r1, r24
 62c:	0c f4       	brge	.+2      	; 0x630 <main+0x1c4>
 62e:	5d c0       	rjmp	.+186    	; 0x6ea <main+0x27e>
				{
					
					if (Pow==1 || Pow==10)   
 630:	cd 57       	subi	r28, 0x7D	; 125
 632:	df 4f       	sbci	r29, 0xFF	; 255
 634:	28 81       	ld	r18, Y
 636:	c3 58       	subi	r28, 0x83	; 131
 638:	d0 40       	sbci	r29, 0x00	; 0
 63a:	cc 57       	subi	r28, 0x7C	; 124
 63c:	df 4f       	sbci	r29, 0xFF	; 255
 63e:	38 81       	ld	r19, Y
 640:	c4 58       	subi	r28, 0x84	; 132
 642:	d0 40       	sbci	r29, 0x00	; 0
 644:	4a 2d       	mov	r20, r10
 646:	50 2f       	mov	r21, r16
 648:	69 2d       	mov	r22, r9
 64a:	78 2d       	mov	r23, r8
 64c:	87 2d       	mov	r24, r7
 64e:	96 2d       	mov	r25, r6
 650:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__cmpsf2>
 654:	88 23       	and	r24, r24
 656:	09 f4       	brne	.+2      	; 0x65a <main+0x1ee>
 658:	ff c1       	rjmp	.+1022   	; 0xa58 <main+0x5ec>
 65a:	20 e0       	ldi	r18, 0x00	; 0
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	40 e2       	ldi	r20, 0x20	; 32
 660:	51 e4       	ldi	r21, 0x41	; 65
 662:	69 2d       	mov	r22, r9
 664:	78 2d       	mov	r23, r8
 666:	87 2d       	mov	r24, r7
 668:	96 2d       	mov	r25, r6
 66a:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__cmpsf2>
 66e:	88 23       	and	r24, r24
 670:	09 f4       	brne	.+2      	; 0x674 <main+0x208>
 672:	cc c1       	rjmp	.+920    	; 0xa0c <main+0x5a0>
						Num1[N]=Num[i]+(Num1[N]*Pow);  // using this equation to understand the meaning of 123 as (one hundred twenty three ) not using it as (one , two , three)
						if (Pow==1){Pow*=10;}          // by making pow=10 instead of 1     (resulting the upper value of the number)   
					}
					else
					{
						Num1[N]+=(Num[i]*Pow);         // this equation using to the same target but it (result the lower value of the number ) 
 674:	c2 01       	movw	r24, r4
 676:	e4 e0       	ldi	r30, 0x04	; 4
 678:	1e 9f       	mul	r17, r30
 67a:	80 0d       	add	r24, r0
 67c:	91 1d       	adc	r25, r1
 67e:	11 24       	eor	r1, r1
 680:	cf 57       	subi	r28, 0x7F	; 127
 682:	df 4f       	sbci	r29, 0xFF	; 255
 684:	99 83       	std	Y+1, r25	; 0x01
 686:	88 83       	st	Y, r24
 688:	c1 58       	subi	r28, 0x81	; 129
 68a:	d0 40       	sbci	r29, 0x00	; 0
 68c:	a7 01       	movw	r20, r14
 68e:	96 01       	movw	r18, r12
 690:	69 2d       	mov	r22, r9
 692:	78 2d       	mov	r23, r8
 694:	87 2d       	mov	r24, r7
 696:	96 2d       	mov	r25, r6
 698:	0e 94 31 07 	call	0xe62	; 0xe62 <__mulsf3>
 69c:	9b 01       	movw	r18, r22
 69e:	ac 01       	movw	r20, r24
 6a0:	cf 57       	subi	r28, 0x7F	; 127
 6a2:	df 4f       	sbci	r29, 0xFF	; 255
 6a4:	e8 81       	ld	r30, Y
 6a6:	f9 81       	ldd	r31, Y+1	; 0x01
 6a8:	c1 58       	subi	r28, 0x81	; 129
 6aa:	d0 40       	sbci	r29, 0x00	; 0
 6ac:	60 81       	ld	r22, Z
 6ae:	71 81       	ldd	r23, Z+1	; 0x01
 6b0:	82 81       	ldd	r24, Z+2	; 0x02
 6b2:	93 81       	ldd	r25, Z+3	; 0x03
 6b4:	0e 94 61 05 	call	0xac2	; 0xac2 <__addsf3>
 6b8:	cf 57       	subi	r28, 0x7F	; 127
 6ba:	df 4f       	sbci	r29, 0xFF	; 255
 6bc:	e8 81       	ld	r30, Y
 6be:	f9 81       	ldd	r31, Y+1	; 0x01
 6c0:	c1 58       	subi	r28, 0x81	; 129
 6c2:	d0 40       	sbci	r29, 0x00	; 0
 6c4:	60 83       	st	Z, r22
 6c6:	71 83       	std	Z+1, r23	; 0x01
 6c8:	82 83       	std	Z+2, r24	; 0x02
 6ca:	93 83       	std	Z+3, r25	; 0x03
						Pow*=(1.0/10);                 // and making pow changes by 0.1
 6cc:	2d ec       	ldi	r18, 0xCD	; 205
 6ce:	3c ec       	ldi	r19, 0xCC	; 204
 6d0:	4c ec       	ldi	r20, 0xCC	; 204
 6d2:	5d e3       	ldi	r21, 0x3D	; 61
 6d4:	69 2d       	mov	r22, r9
 6d6:	78 2d       	mov	r23, r8
 6d8:	87 2d       	mov	r24, r7
 6da:	96 2d       	mov	r25, r6
 6dc:	0e 94 31 07 	call	0xe62	; 0xe62 <__mulsf3>
 6e0:	96 2e       	mov	r9, r22
 6e2:	87 2e       	mov	r8, r23
 6e4:	78 2e       	mov	r7, r24
 6e6:	69 2e       	mov	r6, r25
 6e8:	44 c0       	rjmp	.+136    	; 0x772 <main+0x306>
				// in case the value of Num[i] is a symbol
				else   
				{
					// if this symbol is dot(.)
					
					if (Num[i]==(-2))   //'.' =46     (46-48=-2)
 6ea:	20 e0       	ldi	r18, 0x00	; 0
 6ec:	30 e0       	ldi	r19, 0x00	; 0
 6ee:	40 e0       	ldi	r20, 0x00	; 0
 6f0:	50 ec       	ldi	r21, 0xC0	; 192
 6f2:	c7 01       	movw	r24, r14
 6f4:	b6 01       	movw	r22, r12
 6f6:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__cmpsf2>
 6fa:	88 23       	and	r24, r24
 6fc:	51 f1       	breq	.+84     	; 0x752 <main+0x2e6>
					
					// if this symbol is one of this ( + | - | * | / )
					else
					{
						N++;
						Num1[N]=Num[i];
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	81 0f       	add	r24, r17
 702:	f2 01       	movw	r30, r4
 704:	24 e0       	ldi	r18, 0x04	; 4
 706:	82 9f       	mul	r24, r18
 708:	e0 0d       	add	r30, r0
 70a:	f1 1d       	adc	r31, r1
 70c:	11 24       	eor	r1, r1
 70e:	c0 82       	st	Z, r12
 710:	d1 82       	std	Z+1, r13	; 0x01
 712:	e2 82       	std	Z+2, r14	; 0x02
 714:	f3 82       	std	Z+3, r15	; 0x03
						N++;
						Num1[N]=1;     // this step is an using requirement in the next  for loop to ensure that not enter two symbols together (12+*3  error)
 716:	82 e0       	ldi	r24, 0x02	; 2
 718:	81 0f       	add	r24, r17
 71a:	f2 01       	movw	r30, r4
 71c:	94 e0       	ldi	r25, 0x04	; 4
 71e:	89 9f       	mul	r24, r25
 720:	e0 0d       	add	r30, r0
 722:	f1 1d       	adc	r31, r1
 724:	11 24       	eor	r1, r1
 726:	82 2d       	mov	r24, r2
 728:	93 2d       	mov	r25, r3
 72a:	a0 e8       	ldi	r26, 0x80	; 128
 72c:	bf e3       	ldi	r27, 0x3F	; 63
 72e:	80 83       	st	Z, r24
 730:	91 83       	std	Z+1, r25	; 0x01
 732:	a2 83       	std	Z+2, r26	; 0x02
 734:	b3 83       	std	Z+3, r27	; 0x03
						N++;
 736:	1d 5f       	subi	r17, 0xFD	; 253
						
						Pow=1;
 738:	cd 57       	subi	r28, 0x7D	; 125
 73a:	df 4f       	sbci	r29, 0xFF	; 255
 73c:	98 80       	ld	r9, Y
 73e:	c3 58       	subi	r28, 0x83	; 131
 740:	d0 40       	sbci	r29, 0x00	; 0
 742:	cc 57       	subi	r28, 0x7C	; 124
 744:	df 4f       	sbci	r29, 0xFF	; 255
 746:	88 80       	ld	r8, Y
 748:	c4 58       	subi	r28, 0x84	; 132
 74a:	d0 40       	sbci	r29, 0x00	; 0
 74c:	7a 2c       	mov	r7, r10
 74e:	60 2e       	mov	r6, r16
 750:	10 c0       	rjmp	.+32     	; 0x772 <main+0x306>
				else   
				{
					// if this symbol is dot(.)
					
					if (Num[i]==(-2))   //'.' =46     (46-48=-2)
					{Pow=(1.0/10.0);}
 752:	0f 2e       	mov	r0, r31
 754:	fd ec       	ldi	r31, 0xCD	; 205
 756:	9f 2e       	mov	r9, r31
 758:	f0 2d       	mov	r31, r0
 75a:	0f 2e       	mov	r0, r31
 75c:	fc ec       	ldi	r31, 0xCC	; 204
 75e:	8f 2e       	mov	r8, r31
 760:	f0 2d       	mov	r31, r0
 762:	0f 2e       	mov	r0, r31
 764:	fc ec       	ldi	r31, 0xCC	; 204
 766:	7f 2e       	mov	r7, r31
 768:	f0 2d       	mov	r31, r0
 76a:	0f 2e       	mov	r0, r31
 76c:	fd e3       	ldi	r31, 0x3D	; 61
 76e:	6f 2e       	mov	r6, r31
 770:	f0 2d       	mov	r31, r0
						
						Pow=1;
					}
				}
				
				i++;
 772:	b3 94       	inc	r11
 774:	ef e1       	ldi	r30, 0x1F	; 31
 776:	fe e4       	ldi	r31, 0x4E	; 78
 778:	31 97       	sbiw	r30, 0x01	; 1
 77a:	f1 f7       	brne	.-4      	; 0x778 <main+0x30c>
 77c:	00 c0       	rjmp	.+0      	; 0x77e <main+0x312>
 77e:	00 00       	nop
				_delay_ms(400);  //FOR scanning keypad

			} 
			i=0;
			unsigned char N=0;
			while (Num[i]!=13)  // '=' =61-48=13
 780:	e1 e4       	ldi	r30, 0x41	; 65
 782:	f0 e0       	ldi	r31, 0x00	; 0
 784:	ec 0f       	add	r30, r28
 786:	fd 1f       	adc	r31, r29
 788:	24 e0       	ldi	r18, 0x04	; 4
 78a:	b2 9e       	mul	r11, r18
 78c:	e0 0d       	add	r30, r0
 78e:	f1 1d       	adc	r31, r1
 790:	11 24       	eor	r1, r1
 792:	c0 80       	ld	r12, Z
 794:	d1 80       	ldd	r13, Z+1	; 0x01
 796:	e2 80       	ldd	r14, Z+2	; 0x02
 798:	f3 80       	ldd	r15, Z+3	; 0x03
 79a:	20 e0       	ldi	r18, 0x00	; 0
 79c:	30 e0       	ldi	r19, 0x00	; 0
 79e:	40 e5       	ldi	r20, 0x50	; 80
 7a0:	51 e4       	ldi	r21, 0x41	; 65
 7a2:	c7 01       	movw	r24, r14
 7a4:	b6 01       	movw	r22, r12
 7a6:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__cmpsf2>
 7aa:	81 11       	cpse	r24, r1
 7ac:	2b cf       	rjmp	.-426    	; 0x604 <main+0x198>
				
				i++;
				_delay_ms(10);
			}
			     
			for (int a=0;a<=N;a++)
 7ae:	61 2e       	mov	r6, r17
 7b0:	71 2c       	mov	r7, r1
 7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <main+0x34c>
 7b4:	61 2c       	mov	r6, r1
 7b6:	71 2c       	mov	r7, r1
 7b8:	c1 2c       	mov	r12, r1
 7ba:	d1 2c       	mov	r13, r1
 7bc:	b1 2c       	mov	r11, r1
 7be:	a1 2c       	mov	r10, r1
 7c0:	91 2c       	mov	r9, r1
 7c2:	81 2c       	mov	r8, r1
 7c4:	8f ec       	ldi	r24, 0xCF	; 207
 7c6:	97 e0       	ldi	r25, 0x07	; 7
 7c8:	01 97       	sbiw	r24, 0x01	; 1
 7ca:	f1 f7       	brne	.-4      	; 0x7c8 <main+0x35c>
 7cc:	00 c0       	rjmp	.+0      	; 0x7ce <main+0x362>
 7ce:	00 00       	nop
			{
				_delay_ms(1);
				if (Num1[a]==(-6) && Num1[a+1]==1)   // '*' =42-48=-6
 7d0:	f6 01       	movw	r30, r12
 7d2:	ee 0f       	add	r30, r30
 7d4:	ff 1f       	adc	r31, r31
 7d6:	ee 0f       	add	r30, r30
 7d8:	ff 1f       	adc	r31, r31
 7da:	e4 0d       	add	r30, r4
 7dc:	f5 1d       	adc	r31, r5
 7de:	f0 80       	ld	r15, Z
 7e0:	e1 80       	ldd	r14, Z+1	; 0x01
 7e2:	02 81       	ldd	r16, Z+2	; 0x02
 7e4:	13 81       	ldd	r17, Z+3	; 0x03
 7e6:	20 e0       	ldi	r18, 0x00	; 0
 7e8:	30 e0       	ldi	r19, 0x00	; 0
 7ea:	40 ec       	ldi	r20, 0xC0	; 192
 7ec:	50 ec       	ldi	r21, 0xC0	; 192
 7ee:	6f 2d       	mov	r22, r15
 7f0:	7e 2d       	mov	r23, r14
 7f2:	80 2f       	mov	r24, r16
 7f4:	91 2f       	mov	r25, r17
 7f6:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__cmpsf2>
 7fa:	81 11       	cpse	r24, r1
 7fc:	2d c0       	rjmp	.+90     	; 0x858 <main+0x3ec>
 7fe:	f6 01       	movw	r30, r12
 800:	31 96       	adiw	r30, 0x01	; 1
 802:	ee 0f       	add	r30, r30
 804:	ff 1f       	adc	r31, r31
 806:	ee 0f       	add	r30, r30
 808:	ff 1f       	adc	r31, r31
 80a:	e4 0d       	add	r30, r4
 80c:	f5 1d       	adc	r31, r5
 80e:	22 2d       	mov	r18, r2
 810:	33 2d       	mov	r19, r3
 812:	40 e8       	ldi	r20, 0x80	; 128
 814:	5f e3       	ldi	r21, 0x3F	; 63
 816:	60 81       	ld	r22, Z
 818:	71 81       	ldd	r23, Z+1	; 0x01
 81a:	82 81       	ldd	r24, Z+2	; 0x02
 81c:	93 81       	ldd	r25, Z+3	; 0x03
 81e:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__cmpsf2>
 822:	81 11       	cpse	r24, r1
 824:	c4 c0       	rjmp	.+392    	; 0x9ae <main+0x542>
				{
					Sum*=Num1[a+2];
 826:	92 e0       	ldi	r25, 0x02	; 2
 828:	c9 0e       	add	r12, r25
 82a:	d1 1c       	adc	r13, r1
 82c:	f6 01       	movw	r30, r12
 82e:	ee 0f       	add	r30, r30
 830:	ff 1f       	adc	r31, r31
 832:	ee 0f       	add	r30, r30
 834:	ff 1f       	adc	r31, r31
 836:	e4 0d       	add	r30, r4
 838:	f5 1d       	adc	r31, r5
 83a:	20 81       	ld	r18, Z
 83c:	31 81       	ldd	r19, Z+1	; 0x01
 83e:	42 81       	ldd	r20, Z+2	; 0x02
 840:	53 81       	ldd	r21, Z+3	; 0x03
 842:	6b 2d       	mov	r22, r11
 844:	7a 2d       	mov	r23, r10
 846:	89 2d       	mov	r24, r9
 848:	98 2d       	mov	r25, r8
 84a:	0e 94 31 07 	call	0xe62	; 0xe62 <__mulsf3>
 84e:	b6 2e       	mov	r11, r22
 850:	a7 2e       	mov	r10, r23
 852:	98 2e       	mov	r9, r24
 854:	89 2e       	mov	r8, r25
					a+=2;
 856:	c3 c0       	rjmp	.+390    	; 0x9de <main+0x572>
				}
				else if (Num1[a]==(-5)&& Num1[a+1]==1)  // '+' =43-48=-5
 858:	20 e0       	ldi	r18, 0x00	; 0
 85a:	30 e0       	ldi	r19, 0x00	; 0
 85c:	40 ea       	ldi	r20, 0xA0	; 160
 85e:	50 ec       	ldi	r21, 0xC0	; 192
 860:	6f 2d       	mov	r22, r15
 862:	7e 2d       	mov	r23, r14
 864:	80 2f       	mov	r24, r16
 866:	91 2f       	mov	r25, r17
 868:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__cmpsf2>
 86c:	81 11       	cpse	r24, r1
 86e:	2d c0       	rjmp	.+90     	; 0x8ca <main+0x45e>
 870:	f6 01       	movw	r30, r12
 872:	31 96       	adiw	r30, 0x01	; 1
 874:	ee 0f       	add	r30, r30
 876:	ff 1f       	adc	r31, r31
 878:	ee 0f       	add	r30, r30
 87a:	ff 1f       	adc	r31, r31
 87c:	e4 0d       	add	r30, r4
 87e:	f5 1d       	adc	r31, r5
 880:	22 2d       	mov	r18, r2
 882:	33 2d       	mov	r19, r3
 884:	40 e8       	ldi	r20, 0x80	; 128
 886:	5f e3       	ldi	r21, 0x3F	; 63
 888:	60 81       	ld	r22, Z
 88a:	71 81       	ldd	r23, Z+1	; 0x01
 88c:	82 81       	ldd	r24, Z+2	; 0x02
 88e:	93 81       	ldd	r25, Z+3	; 0x03
 890:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__cmpsf2>
 894:	81 11       	cpse	r24, r1
 896:	90 c0       	rjmp	.+288    	; 0x9b8 <main+0x54c>
				{
					Sum+=Num1[a+2];
 898:	e2 e0       	ldi	r30, 0x02	; 2
 89a:	ce 0e       	add	r12, r30
 89c:	d1 1c       	adc	r13, r1
 89e:	f6 01       	movw	r30, r12
 8a0:	ee 0f       	add	r30, r30
 8a2:	ff 1f       	adc	r31, r31
 8a4:	ee 0f       	add	r30, r30
 8a6:	ff 1f       	adc	r31, r31
 8a8:	e4 0d       	add	r30, r4
 8aa:	f5 1d       	adc	r31, r5
 8ac:	20 81       	ld	r18, Z
 8ae:	31 81       	ldd	r19, Z+1	; 0x01
 8b0:	42 81       	ldd	r20, Z+2	; 0x02
 8b2:	53 81       	ldd	r21, Z+3	; 0x03
 8b4:	6b 2d       	mov	r22, r11
 8b6:	7a 2d       	mov	r23, r10
 8b8:	89 2d       	mov	r24, r9
 8ba:	98 2d       	mov	r25, r8
 8bc:	0e 94 61 05 	call	0xac2	; 0xac2 <__addsf3>
 8c0:	b6 2e       	mov	r11, r22
 8c2:	a7 2e       	mov	r10, r23
 8c4:	98 2e       	mov	r9, r24
 8c6:	89 2e       	mov	r8, r25
					a+=2;
 8c8:	8a c0       	rjmp	.+276    	; 0x9de <main+0x572>
				}
				else if (Num1[a]==(-3)&& Num1[a+1]==1)   // '-' =45-48=-3
 8ca:	20 e0       	ldi	r18, 0x00	; 0
 8cc:	30 e0       	ldi	r19, 0x00	; 0
 8ce:	40 e4       	ldi	r20, 0x40	; 64
 8d0:	50 ec       	ldi	r21, 0xC0	; 192
 8d2:	6f 2d       	mov	r22, r15
 8d4:	7e 2d       	mov	r23, r14
 8d6:	80 2f       	mov	r24, r16
 8d8:	91 2f       	mov	r25, r17
 8da:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__cmpsf2>
 8de:	81 11       	cpse	r24, r1
 8e0:	2d c0       	rjmp	.+90     	; 0x93c <main+0x4d0>
 8e2:	f6 01       	movw	r30, r12
 8e4:	31 96       	adiw	r30, 0x01	; 1
 8e6:	ee 0f       	add	r30, r30
 8e8:	ff 1f       	adc	r31, r31
 8ea:	ee 0f       	add	r30, r30
 8ec:	ff 1f       	adc	r31, r31
 8ee:	e4 0d       	add	r30, r4
 8f0:	f5 1d       	adc	r31, r5
 8f2:	22 2d       	mov	r18, r2
 8f4:	33 2d       	mov	r19, r3
 8f6:	40 e8       	ldi	r20, 0x80	; 128
 8f8:	5f e3       	ldi	r21, 0x3F	; 63
 8fa:	60 81       	ld	r22, Z
 8fc:	71 81       	ldd	r23, Z+1	; 0x01
 8fe:	82 81       	ldd	r24, Z+2	; 0x02
 900:	93 81       	ldd	r25, Z+3	; 0x03
 902:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__cmpsf2>
 906:	81 11       	cpse	r24, r1
 908:	5c c0       	rjmp	.+184    	; 0x9c2 <main+0x556>
				{
					Sum-=Num1[a+2];
 90a:	f2 e0       	ldi	r31, 0x02	; 2
 90c:	cf 0e       	add	r12, r31
 90e:	d1 1c       	adc	r13, r1
 910:	f6 01       	movw	r30, r12
 912:	ee 0f       	add	r30, r30
 914:	ff 1f       	adc	r31, r31
 916:	ee 0f       	add	r30, r30
 918:	ff 1f       	adc	r31, r31
 91a:	e4 0d       	add	r30, r4
 91c:	f5 1d       	adc	r31, r5
 91e:	20 81       	ld	r18, Z
 920:	31 81       	ldd	r19, Z+1	; 0x01
 922:	42 81       	ldd	r20, Z+2	; 0x02
 924:	53 81       	ldd	r21, Z+3	; 0x03
 926:	6b 2d       	mov	r22, r11
 928:	7a 2d       	mov	r23, r10
 92a:	89 2d       	mov	r24, r9
 92c:	98 2d       	mov	r25, r8
 92e:	0e 94 60 05 	call	0xac0	; 0xac0 <__subsf3>
 932:	b6 2e       	mov	r11, r22
 934:	a7 2e       	mov	r10, r23
 936:	98 2e       	mov	r9, r24
 938:	89 2e       	mov	r8, r25
					a+=2;
 93a:	51 c0       	rjmp	.+162    	; 0x9de <main+0x572>
				}
				else if (Num1[a]==(-1)&& Num1[a+1]==1)  // '/' =47-48=-1
 93c:	20 e0       	ldi	r18, 0x00	; 0
 93e:	30 e0       	ldi	r19, 0x00	; 0
 940:	40 e8       	ldi	r20, 0x80	; 128
 942:	5f eb       	ldi	r21, 0xBF	; 191
 944:	6f 2d       	mov	r22, r15
 946:	7e 2d       	mov	r23, r14
 948:	80 2f       	mov	r24, r16
 94a:	91 2f       	mov	r25, r17
 94c:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__cmpsf2>
 950:	81 11       	cpse	r24, r1
 952:	3c c0       	rjmp	.+120    	; 0x9cc <main+0x560>
 954:	f6 01       	movw	r30, r12
 956:	31 96       	adiw	r30, 0x01	; 1
 958:	ee 0f       	add	r30, r30
 95a:	ff 1f       	adc	r31, r31
 95c:	ee 0f       	add	r30, r30
 95e:	ff 1f       	adc	r31, r31
 960:	e4 0d       	add	r30, r4
 962:	f5 1d       	adc	r31, r5
 964:	22 2d       	mov	r18, r2
 966:	33 2d       	mov	r19, r3
 968:	40 e8       	ldi	r20, 0x80	; 128
 96a:	5f e3       	ldi	r21, 0x3F	; 63
 96c:	60 81       	ld	r22, Z
 96e:	71 81       	ldd	r23, Z+1	; 0x01
 970:	82 81       	ldd	r24, Z+2	; 0x02
 972:	93 81       	ldd	r25, Z+3	; 0x03
 974:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__cmpsf2>
 978:	81 11       	cpse	r24, r1
 97a:	2d c0       	rjmp	.+90     	; 0x9d6 <main+0x56a>
				{
					Sum/=Num1[a+2];
 97c:	22 e0       	ldi	r18, 0x02	; 2
 97e:	c2 0e       	add	r12, r18
 980:	d1 1c       	adc	r13, r1
 982:	f6 01       	movw	r30, r12
 984:	ee 0f       	add	r30, r30
 986:	ff 1f       	adc	r31, r31
 988:	ee 0f       	add	r30, r30
 98a:	ff 1f       	adc	r31, r31
 98c:	e4 0d       	add	r30, r4
 98e:	f5 1d       	adc	r31, r5
 990:	20 81       	ld	r18, Z
 992:	31 81       	ldd	r19, Z+1	; 0x01
 994:	42 81       	ldd	r20, Z+2	; 0x02
 996:	53 81       	ldd	r21, Z+3	; 0x03
 998:	6b 2d       	mov	r22, r11
 99a:	7a 2d       	mov	r23, r10
 99c:	89 2d       	mov	r24, r9
 99e:	98 2d       	mov	r25, r8
 9a0:	0e 94 d2 05 	call	0xba4	; 0xba4 <__divsf3>
 9a4:	b6 2e       	mov	r11, r22
 9a6:	a7 2e       	mov	r10, r23
 9a8:	98 2e       	mov	r9, r24
 9aa:	89 2e       	mov	r8, r25
					a+=2;
 9ac:	18 c0       	rjmp	.+48     	; 0x9de <main+0x572>
				}
				else{
					Sum=Num1[a];
 9ae:	bf 2c       	mov	r11, r15
 9b0:	ae 2c       	mov	r10, r14
 9b2:	90 2e       	mov	r9, r16
 9b4:	81 2e       	mov	r8, r17
 9b6:	13 c0       	rjmp	.+38     	; 0x9de <main+0x572>
 9b8:	bf 2c       	mov	r11, r15
 9ba:	ae 2c       	mov	r10, r14
 9bc:	90 2e       	mov	r9, r16
 9be:	81 2e       	mov	r8, r17
 9c0:	0e c0       	rjmp	.+28     	; 0x9de <main+0x572>
 9c2:	bf 2c       	mov	r11, r15
 9c4:	ae 2c       	mov	r10, r14
 9c6:	90 2e       	mov	r9, r16
 9c8:	81 2e       	mov	r8, r17
 9ca:	09 c0       	rjmp	.+18     	; 0x9de <main+0x572>
 9cc:	bf 2c       	mov	r11, r15
 9ce:	ae 2c       	mov	r10, r14
 9d0:	90 2e       	mov	r9, r16
 9d2:	81 2e       	mov	r8, r17
 9d4:	04 c0       	rjmp	.+8      	; 0x9de <main+0x572>
 9d6:	bf 2c       	mov	r11, r15
 9d8:	ae 2c       	mov	r10, r14
 9da:	90 2e       	mov	r9, r16
 9dc:	81 2e       	mov	r8, r17
				
				i++;
				_delay_ms(10);
			}
			     
			for (int a=0;a<=N;a++)
 9de:	8f ef       	ldi	r24, 0xFF	; 255
 9e0:	c8 1a       	sub	r12, r24
 9e2:	d8 0a       	sbc	r13, r24
 9e4:	6c 14       	cp	r6, r12
 9e6:	7d 04       	cpc	r7, r13
 9e8:	0c f0       	brlt	.+2      	; 0x9ec <main+0x580>
 9ea:	ec ce       	rjmp	.-552    	; 0x7c4 <main+0x358>
				else{
					Sum=Num1[a];
				}
				
			}
			lcd_Print_Num(Sum);
 9ec:	6b 2d       	mov	r22, r11
 9ee:	7a 2d       	mov	r23, r10
 9f0:	89 2d       	mov	r24, r9
 9f2:	98 2d       	mov	r25, r8
 9f4:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_Print_Num>
 9f8:	9f ef       	ldi	r25, 0xFF	; 255
 9fa:	e9 e6       	ldi	r30, 0x69	; 105
 9fc:	f8 e1       	ldi	r31, 0x18	; 24
 9fe:	91 50       	subi	r25, 0x01	; 1
 a00:	e0 40       	sbci	r30, 0x00	; 0
 a02:	f0 40       	sbci	r31, 0x00	; 0
 a04:	e1 f7       	brne	.-8      	; 0x9fe <main+0x592>
 a06:	00 c0       	rjmp	.+0      	; 0xa08 <main+0x59c>
 a08:	00 00       	nop
			_delay_ms(1000);
			x=0;
		} //----- while(x)----
	} //-------while(1)------
 a0a:	6a cd       	rjmp	.-1324   	; 0x4e0 <main+0x74>
				if (Num[i]>=0 && Num[i]<=9)
				{
					
					if (Pow==1 || Pow==10)   
					{
						Num1[N]=Num[i]+(Num1[N]*Pow);  // using this equation to understand the meaning of 123 as (one hundred twenty three ) not using it as (one , two , three)
 a0c:	c2 01       	movw	r24, r4
 a0e:	e4 e0       	ldi	r30, 0x04	; 4
 a10:	1e 9f       	mul	r17, r30
 a12:	80 0d       	add	r24, r0
 a14:	91 1d       	adc	r25, r1
 a16:	11 24       	eor	r1, r1
 a18:	cf 57       	subi	r28, 0x7F	; 127
 a1a:	df 4f       	sbci	r29, 0xFF	; 255
 a1c:	99 83       	std	Y+1, r25	; 0x01
 a1e:	88 83       	st	Y, r24
 a20:	c1 58       	subi	r28, 0x81	; 129
 a22:	d0 40       	sbci	r29, 0x00	; 0
 a24:	fc 01       	movw	r30, r24
 a26:	20 81       	ld	r18, Z
 a28:	31 81       	ldd	r19, Z+1	; 0x01
 a2a:	42 81       	ldd	r20, Z+2	; 0x02
 a2c:	53 81       	ldd	r21, Z+3	; 0x03
 a2e:	69 2d       	mov	r22, r9
 a30:	78 2d       	mov	r23, r8
 a32:	87 2d       	mov	r24, r7
 a34:	96 2d       	mov	r25, r6
 a36:	0e 94 31 07 	call	0xe62	; 0xe62 <__mulsf3>
 a3a:	a7 01       	movw	r20, r14
 a3c:	96 01       	movw	r18, r12
 a3e:	0e 94 61 05 	call	0xac2	; 0xac2 <__addsf3>
 a42:	cf 57       	subi	r28, 0x7F	; 127
 a44:	df 4f       	sbci	r29, 0xFF	; 255
 a46:	e8 81       	ld	r30, Y
 a48:	f9 81       	ldd	r31, Y+1	; 0x01
 a4a:	c1 58       	subi	r28, 0x81	; 129
 a4c:	d0 40       	sbci	r29, 0x00	; 0
 a4e:	60 83       	st	Z, r22
 a50:	71 83       	std	Z+1, r23	; 0x01
 a52:	82 83       	std	Z+2, r24	; 0x02
 a54:	93 83       	std	Z+3, r25	; 0x03
 a56:	8d ce       	rjmp	.-742    	; 0x772 <main+0x306>
 a58:	c2 01       	movw	r24, r4
 a5a:	e4 e0       	ldi	r30, 0x04	; 4
 a5c:	1e 9f       	mul	r17, r30
 a5e:	80 0d       	add	r24, r0
 a60:	91 1d       	adc	r25, r1
 a62:	11 24       	eor	r1, r1
 a64:	cf 57       	subi	r28, 0x7F	; 127
 a66:	df 4f       	sbci	r29, 0xFF	; 255
 a68:	99 83       	std	Y+1, r25	; 0x01
 a6a:	88 83       	st	Y, r24
 a6c:	c1 58       	subi	r28, 0x81	; 129
 a6e:	d0 40       	sbci	r29, 0x00	; 0
 a70:	fc 01       	movw	r30, r24
 a72:	20 81       	ld	r18, Z
 a74:	31 81       	ldd	r19, Z+1	; 0x01
 a76:	42 81       	ldd	r20, Z+2	; 0x02
 a78:	53 81       	ldd	r21, Z+3	; 0x03
 a7a:	69 2d       	mov	r22, r9
 a7c:	78 2d       	mov	r23, r8
 a7e:	87 2d       	mov	r24, r7
 a80:	96 2d       	mov	r25, r6
 a82:	0e 94 31 07 	call	0xe62	; 0xe62 <__mulsf3>
 a86:	a7 01       	movw	r20, r14
 a88:	96 01       	movw	r18, r12
 a8a:	0e 94 61 05 	call	0xac2	; 0xac2 <__addsf3>
 a8e:	cf 57       	subi	r28, 0x7F	; 127
 a90:	df 4f       	sbci	r29, 0xFF	; 255
 a92:	e8 81       	ld	r30, Y
 a94:	f9 81       	ldd	r31, Y+1	; 0x01
 a96:	c1 58       	subi	r28, 0x81	; 129
 a98:	d0 40       	sbci	r29, 0x00	; 0
 a9a:	60 83       	st	Z, r22
 a9c:	71 83       	std	Z+1, r23	; 0x01
 a9e:	82 83       	std	Z+2, r24	; 0x02
 aa0:	93 83       	std	Z+3, r25	; 0x03
						if (Pow==1){Pow*=10;}          // by making pow=10 instead of 1     (resulting the upper value of the number)   
 aa2:	20 e0       	ldi	r18, 0x00	; 0
 aa4:	30 e0       	ldi	r19, 0x00	; 0
 aa6:	40 e2       	ldi	r20, 0x20	; 32
 aa8:	51 e4       	ldi	r21, 0x41	; 65
 aaa:	69 2d       	mov	r22, r9
 aac:	78 2d       	mov	r23, r8
 aae:	87 2d       	mov	r24, r7
 ab0:	96 2d       	mov	r25, r6
 ab2:	0e 94 31 07 	call	0xe62	; 0xe62 <__mulsf3>
 ab6:	96 2e       	mov	r9, r22
 ab8:	87 2e       	mov	r8, r23
 aba:	78 2e       	mov	r7, r24
 abc:	69 2e       	mov	r6, r25
 abe:	59 ce       	rjmp	.-846    	; 0x772 <main+0x306>

00000ac0 <__subsf3>:
 ac0:	50 58       	subi	r21, 0x80	; 128

00000ac2 <__addsf3>:
 ac2:	bb 27       	eor	r27, r27
 ac4:	aa 27       	eor	r26, r26
 ac6:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__addsf3x>
 aca:	0c 94 f2 06 	jmp	0xde4	; 0xde4 <__fp_round>
 ace:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__fp_pscA>
 ad2:	38 f0       	brcs	.+14     	; 0xae2 <__addsf3+0x20>
 ad4:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__fp_pscB>
 ad8:	20 f0       	brcs	.+8      	; 0xae2 <__addsf3+0x20>
 ada:	39 f4       	brne	.+14     	; 0xaea <__addsf3+0x28>
 adc:	9f 3f       	cpi	r25, 0xFF	; 255
 ade:	19 f4       	brne	.+6      	; 0xae6 <__addsf3+0x24>
 ae0:	26 f4       	brtc	.+8      	; 0xaea <__addsf3+0x28>
 ae2:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <__fp_nan>
 ae6:	0e f4       	brtc	.+2      	; 0xaea <__addsf3+0x28>
 ae8:	e0 95       	com	r30
 aea:	e7 fb       	bst	r30, 7
 aec:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__fp_inf>

00000af0 <__addsf3x>:
 af0:	e9 2f       	mov	r30, r25
 af2:	0e 94 03 07 	call	0xe06	; 0xe06 <__fp_split3>
 af6:	58 f3       	brcs	.-42     	; 0xace <__addsf3+0xc>
 af8:	ba 17       	cp	r27, r26
 afa:	62 07       	cpc	r22, r18
 afc:	73 07       	cpc	r23, r19
 afe:	84 07       	cpc	r24, r20
 b00:	95 07       	cpc	r25, r21
 b02:	20 f0       	brcs	.+8      	; 0xb0c <__addsf3x+0x1c>
 b04:	79 f4       	brne	.+30     	; 0xb24 <__addsf3x+0x34>
 b06:	a6 f5       	brtc	.+104    	; 0xb70 <__addsf3x+0x80>
 b08:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <__fp_zero>
 b0c:	0e f4       	brtc	.+2      	; 0xb10 <__addsf3x+0x20>
 b0e:	e0 95       	com	r30
 b10:	0b 2e       	mov	r0, r27
 b12:	ba 2f       	mov	r27, r26
 b14:	a0 2d       	mov	r26, r0
 b16:	0b 01       	movw	r0, r22
 b18:	b9 01       	movw	r22, r18
 b1a:	90 01       	movw	r18, r0
 b1c:	0c 01       	movw	r0, r24
 b1e:	ca 01       	movw	r24, r20
 b20:	a0 01       	movw	r20, r0
 b22:	11 24       	eor	r1, r1
 b24:	ff 27       	eor	r31, r31
 b26:	59 1b       	sub	r21, r25
 b28:	99 f0       	breq	.+38     	; 0xb50 <__addsf3x+0x60>
 b2a:	59 3f       	cpi	r21, 0xF9	; 249
 b2c:	50 f4       	brcc	.+20     	; 0xb42 <__addsf3x+0x52>
 b2e:	50 3e       	cpi	r21, 0xE0	; 224
 b30:	68 f1       	brcs	.+90     	; 0xb8c <__addsf3x+0x9c>
 b32:	1a 16       	cp	r1, r26
 b34:	f0 40       	sbci	r31, 0x00	; 0
 b36:	a2 2f       	mov	r26, r18
 b38:	23 2f       	mov	r18, r19
 b3a:	34 2f       	mov	r19, r20
 b3c:	44 27       	eor	r20, r20
 b3e:	58 5f       	subi	r21, 0xF8	; 248
 b40:	f3 cf       	rjmp	.-26     	; 0xb28 <__addsf3x+0x38>
 b42:	46 95       	lsr	r20
 b44:	37 95       	ror	r19
 b46:	27 95       	ror	r18
 b48:	a7 95       	ror	r26
 b4a:	f0 40       	sbci	r31, 0x00	; 0
 b4c:	53 95       	inc	r21
 b4e:	c9 f7       	brne	.-14     	; 0xb42 <__addsf3x+0x52>
 b50:	7e f4       	brtc	.+30     	; 0xb70 <__addsf3x+0x80>
 b52:	1f 16       	cp	r1, r31
 b54:	ba 0b       	sbc	r27, r26
 b56:	62 0b       	sbc	r22, r18
 b58:	73 0b       	sbc	r23, r19
 b5a:	84 0b       	sbc	r24, r20
 b5c:	ba f0       	brmi	.+46     	; 0xb8c <__addsf3x+0x9c>
 b5e:	91 50       	subi	r25, 0x01	; 1
 b60:	a1 f0       	breq	.+40     	; 0xb8a <__addsf3x+0x9a>
 b62:	ff 0f       	add	r31, r31
 b64:	bb 1f       	adc	r27, r27
 b66:	66 1f       	adc	r22, r22
 b68:	77 1f       	adc	r23, r23
 b6a:	88 1f       	adc	r24, r24
 b6c:	c2 f7       	brpl	.-16     	; 0xb5e <__addsf3x+0x6e>
 b6e:	0e c0       	rjmp	.+28     	; 0xb8c <__addsf3x+0x9c>
 b70:	ba 0f       	add	r27, r26
 b72:	62 1f       	adc	r22, r18
 b74:	73 1f       	adc	r23, r19
 b76:	84 1f       	adc	r24, r20
 b78:	48 f4       	brcc	.+18     	; 0xb8c <__addsf3x+0x9c>
 b7a:	87 95       	ror	r24
 b7c:	77 95       	ror	r23
 b7e:	67 95       	ror	r22
 b80:	b7 95       	ror	r27
 b82:	f7 95       	ror	r31
 b84:	9e 3f       	cpi	r25, 0xFE	; 254
 b86:	08 f0       	brcs	.+2      	; 0xb8a <__addsf3x+0x9a>
 b88:	b0 cf       	rjmp	.-160    	; 0xaea <__addsf3+0x28>
 b8a:	93 95       	inc	r25
 b8c:	88 0f       	add	r24, r24
 b8e:	08 f0       	brcs	.+2      	; 0xb92 <__addsf3x+0xa2>
 b90:	99 27       	eor	r25, r25
 b92:	ee 0f       	add	r30, r30
 b94:	97 95       	ror	r25
 b96:	87 95       	ror	r24
 b98:	08 95       	ret

00000b9a <__cmpsf2>:
 b9a:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__fp_cmp>
 b9e:	08 f4       	brcc	.+2      	; 0xba2 <__cmpsf2+0x8>
 ba0:	81 e0       	ldi	r24, 0x01	; 1
 ba2:	08 95       	ret

00000ba4 <__divsf3>:
 ba4:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__divsf3x>
 ba8:	0c 94 f2 06 	jmp	0xde4	; 0xde4 <__fp_round>
 bac:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__fp_pscB>
 bb0:	58 f0       	brcs	.+22     	; 0xbc8 <__divsf3+0x24>
 bb2:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__fp_pscA>
 bb6:	40 f0       	brcs	.+16     	; 0xbc8 <__divsf3+0x24>
 bb8:	29 f4       	brne	.+10     	; 0xbc4 <__divsf3+0x20>
 bba:	5f 3f       	cpi	r21, 0xFF	; 255
 bbc:	29 f0       	breq	.+10     	; 0xbc8 <__divsf3+0x24>
 bbe:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__fp_inf>
 bc2:	51 11       	cpse	r21, r1
 bc4:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__fp_szero>
 bc8:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <__fp_nan>

00000bcc <__divsf3x>:
 bcc:	0e 94 03 07 	call	0xe06	; 0xe06 <__fp_split3>
 bd0:	68 f3       	brcs	.-38     	; 0xbac <__divsf3+0x8>

00000bd2 <__divsf3_pse>:
 bd2:	99 23       	and	r25, r25
 bd4:	b1 f3       	breq	.-20     	; 0xbc2 <__divsf3+0x1e>
 bd6:	55 23       	and	r21, r21
 bd8:	91 f3       	breq	.-28     	; 0xbbe <__divsf3+0x1a>
 bda:	95 1b       	sub	r25, r21
 bdc:	55 0b       	sbc	r21, r21
 bde:	bb 27       	eor	r27, r27
 be0:	aa 27       	eor	r26, r26
 be2:	62 17       	cp	r22, r18
 be4:	73 07       	cpc	r23, r19
 be6:	84 07       	cpc	r24, r20
 be8:	38 f0       	brcs	.+14     	; 0xbf8 <__divsf3_pse+0x26>
 bea:	9f 5f       	subi	r25, 0xFF	; 255
 bec:	5f 4f       	sbci	r21, 0xFF	; 255
 bee:	22 0f       	add	r18, r18
 bf0:	33 1f       	adc	r19, r19
 bf2:	44 1f       	adc	r20, r20
 bf4:	aa 1f       	adc	r26, r26
 bf6:	a9 f3       	breq	.-22     	; 0xbe2 <__divsf3_pse+0x10>
 bf8:	35 d0       	rcall	.+106    	; 0xc64 <__divsf3_pse+0x92>
 bfa:	0e 2e       	mov	r0, r30
 bfc:	3a f0       	brmi	.+14     	; 0xc0c <__divsf3_pse+0x3a>
 bfe:	e0 e8       	ldi	r30, 0x80	; 128
 c00:	32 d0       	rcall	.+100    	; 0xc66 <__divsf3_pse+0x94>
 c02:	91 50       	subi	r25, 0x01	; 1
 c04:	50 40       	sbci	r21, 0x00	; 0
 c06:	e6 95       	lsr	r30
 c08:	00 1c       	adc	r0, r0
 c0a:	ca f7       	brpl	.-14     	; 0xbfe <__divsf3_pse+0x2c>
 c0c:	2b d0       	rcall	.+86     	; 0xc64 <__divsf3_pse+0x92>
 c0e:	fe 2f       	mov	r31, r30
 c10:	29 d0       	rcall	.+82     	; 0xc64 <__divsf3_pse+0x92>
 c12:	66 0f       	add	r22, r22
 c14:	77 1f       	adc	r23, r23
 c16:	88 1f       	adc	r24, r24
 c18:	bb 1f       	adc	r27, r27
 c1a:	26 17       	cp	r18, r22
 c1c:	37 07       	cpc	r19, r23
 c1e:	48 07       	cpc	r20, r24
 c20:	ab 07       	cpc	r26, r27
 c22:	b0 e8       	ldi	r27, 0x80	; 128
 c24:	09 f0       	breq	.+2      	; 0xc28 <__divsf3_pse+0x56>
 c26:	bb 0b       	sbc	r27, r27
 c28:	80 2d       	mov	r24, r0
 c2a:	bf 01       	movw	r22, r30
 c2c:	ff 27       	eor	r31, r31
 c2e:	93 58       	subi	r25, 0x83	; 131
 c30:	5f 4f       	sbci	r21, 0xFF	; 255
 c32:	3a f0       	brmi	.+14     	; 0xc42 <__divsf3_pse+0x70>
 c34:	9e 3f       	cpi	r25, 0xFE	; 254
 c36:	51 05       	cpc	r21, r1
 c38:	78 f0       	brcs	.+30     	; 0xc58 <__divsf3_pse+0x86>
 c3a:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__fp_inf>
 c3e:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__fp_szero>
 c42:	5f 3f       	cpi	r21, 0xFF	; 255
 c44:	e4 f3       	brlt	.-8      	; 0xc3e <__divsf3_pse+0x6c>
 c46:	98 3e       	cpi	r25, 0xE8	; 232
 c48:	d4 f3       	brlt	.-12     	; 0xc3e <__divsf3_pse+0x6c>
 c4a:	86 95       	lsr	r24
 c4c:	77 95       	ror	r23
 c4e:	67 95       	ror	r22
 c50:	b7 95       	ror	r27
 c52:	f7 95       	ror	r31
 c54:	9f 5f       	subi	r25, 0xFF	; 255
 c56:	c9 f7       	brne	.-14     	; 0xc4a <__divsf3_pse+0x78>
 c58:	88 0f       	add	r24, r24
 c5a:	91 1d       	adc	r25, r1
 c5c:	96 95       	lsr	r25
 c5e:	87 95       	ror	r24
 c60:	97 f9       	bld	r25, 7
 c62:	08 95       	ret
 c64:	e1 e0       	ldi	r30, 0x01	; 1
 c66:	66 0f       	add	r22, r22
 c68:	77 1f       	adc	r23, r23
 c6a:	88 1f       	adc	r24, r24
 c6c:	bb 1f       	adc	r27, r27
 c6e:	62 17       	cp	r22, r18
 c70:	73 07       	cpc	r23, r19
 c72:	84 07       	cpc	r24, r20
 c74:	ba 07       	cpc	r27, r26
 c76:	20 f0       	brcs	.+8      	; 0xc80 <__divsf3_pse+0xae>
 c78:	62 1b       	sub	r22, r18
 c7a:	73 0b       	sbc	r23, r19
 c7c:	84 0b       	sbc	r24, r20
 c7e:	ba 0b       	sbc	r27, r26
 c80:	ee 1f       	adc	r30, r30
 c82:	88 f7       	brcc	.-30     	; 0xc66 <__divsf3_pse+0x94>
 c84:	e0 95       	com	r30
 c86:	08 95       	ret

00000c88 <__fixsfsi>:
 c88:	0e 94 4b 06 	call	0xc96	; 0xc96 <__fixunssfsi>
 c8c:	68 94       	set
 c8e:	b1 11       	cpse	r27, r1
 c90:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__fp_szero>
 c94:	08 95       	ret

00000c96 <__fixunssfsi>:
 c96:	0e 94 0b 07 	call	0xe16	; 0xe16 <__fp_splitA>
 c9a:	88 f0       	brcs	.+34     	; 0xcbe <__fixunssfsi+0x28>
 c9c:	9f 57       	subi	r25, 0x7F	; 127
 c9e:	98 f0       	brcs	.+38     	; 0xcc6 <__fixunssfsi+0x30>
 ca0:	b9 2f       	mov	r27, r25
 ca2:	99 27       	eor	r25, r25
 ca4:	b7 51       	subi	r27, 0x17	; 23
 ca6:	b0 f0       	brcs	.+44     	; 0xcd4 <__fixunssfsi+0x3e>
 ca8:	e1 f0       	breq	.+56     	; 0xce2 <__fixunssfsi+0x4c>
 caa:	66 0f       	add	r22, r22
 cac:	77 1f       	adc	r23, r23
 cae:	88 1f       	adc	r24, r24
 cb0:	99 1f       	adc	r25, r25
 cb2:	1a f0       	brmi	.+6      	; 0xcba <__fixunssfsi+0x24>
 cb4:	ba 95       	dec	r27
 cb6:	c9 f7       	brne	.-14     	; 0xcaa <__fixunssfsi+0x14>
 cb8:	14 c0       	rjmp	.+40     	; 0xce2 <__fixunssfsi+0x4c>
 cba:	b1 30       	cpi	r27, 0x01	; 1
 cbc:	91 f0       	breq	.+36     	; 0xce2 <__fixunssfsi+0x4c>
 cbe:	0e 94 25 07 	call	0xe4a	; 0xe4a <__fp_zero>
 cc2:	b1 e0       	ldi	r27, 0x01	; 1
 cc4:	08 95       	ret
 cc6:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <__fp_zero>
 cca:	67 2f       	mov	r22, r23
 ccc:	78 2f       	mov	r23, r24
 cce:	88 27       	eor	r24, r24
 cd0:	b8 5f       	subi	r27, 0xF8	; 248
 cd2:	39 f0       	breq	.+14     	; 0xce2 <__fixunssfsi+0x4c>
 cd4:	b9 3f       	cpi	r27, 0xF9	; 249
 cd6:	cc f3       	brlt	.-14     	; 0xcca <__fixunssfsi+0x34>
 cd8:	86 95       	lsr	r24
 cda:	77 95       	ror	r23
 cdc:	67 95       	ror	r22
 cde:	b3 95       	inc	r27
 ce0:	d9 f7       	brne	.-10     	; 0xcd8 <__fixunssfsi+0x42>
 ce2:	3e f4       	brtc	.+14     	; 0xcf2 <__fixunssfsi+0x5c>
 ce4:	90 95       	com	r25
 ce6:	80 95       	com	r24
 ce8:	70 95       	com	r23
 cea:	61 95       	neg	r22
 cec:	7f 4f       	sbci	r23, 0xFF	; 255
 cee:	8f 4f       	sbci	r24, 0xFF	; 255
 cf0:	9f 4f       	sbci	r25, 0xFF	; 255
 cf2:	08 95       	ret

00000cf4 <__floatunsisf>:
 cf4:	e8 94       	clt
 cf6:	09 c0       	rjmp	.+18     	; 0xd0a <__floatsisf+0x12>

00000cf8 <__floatsisf>:
 cf8:	97 fb       	bst	r25, 7
 cfa:	3e f4       	brtc	.+14     	; 0xd0a <__floatsisf+0x12>
 cfc:	90 95       	com	r25
 cfe:	80 95       	com	r24
 d00:	70 95       	com	r23
 d02:	61 95       	neg	r22
 d04:	7f 4f       	sbci	r23, 0xFF	; 255
 d06:	8f 4f       	sbci	r24, 0xFF	; 255
 d08:	9f 4f       	sbci	r25, 0xFF	; 255
 d0a:	99 23       	and	r25, r25
 d0c:	a9 f0       	breq	.+42     	; 0xd38 <__floatsisf+0x40>
 d0e:	f9 2f       	mov	r31, r25
 d10:	96 e9       	ldi	r25, 0x96	; 150
 d12:	bb 27       	eor	r27, r27
 d14:	93 95       	inc	r25
 d16:	f6 95       	lsr	r31
 d18:	87 95       	ror	r24
 d1a:	77 95       	ror	r23
 d1c:	67 95       	ror	r22
 d1e:	b7 95       	ror	r27
 d20:	f1 11       	cpse	r31, r1
 d22:	f8 cf       	rjmp	.-16     	; 0xd14 <__floatsisf+0x1c>
 d24:	fa f4       	brpl	.+62     	; 0xd64 <__floatsisf+0x6c>
 d26:	bb 0f       	add	r27, r27
 d28:	11 f4       	brne	.+4      	; 0xd2e <__floatsisf+0x36>
 d2a:	60 ff       	sbrs	r22, 0
 d2c:	1b c0       	rjmp	.+54     	; 0xd64 <__floatsisf+0x6c>
 d2e:	6f 5f       	subi	r22, 0xFF	; 255
 d30:	7f 4f       	sbci	r23, 0xFF	; 255
 d32:	8f 4f       	sbci	r24, 0xFF	; 255
 d34:	9f 4f       	sbci	r25, 0xFF	; 255
 d36:	16 c0       	rjmp	.+44     	; 0xd64 <__floatsisf+0x6c>
 d38:	88 23       	and	r24, r24
 d3a:	11 f0       	breq	.+4      	; 0xd40 <__floatsisf+0x48>
 d3c:	96 e9       	ldi	r25, 0x96	; 150
 d3e:	11 c0       	rjmp	.+34     	; 0xd62 <__floatsisf+0x6a>
 d40:	77 23       	and	r23, r23
 d42:	21 f0       	breq	.+8      	; 0xd4c <__floatsisf+0x54>
 d44:	9e e8       	ldi	r25, 0x8E	; 142
 d46:	87 2f       	mov	r24, r23
 d48:	76 2f       	mov	r23, r22
 d4a:	05 c0       	rjmp	.+10     	; 0xd56 <__floatsisf+0x5e>
 d4c:	66 23       	and	r22, r22
 d4e:	71 f0       	breq	.+28     	; 0xd6c <__floatsisf+0x74>
 d50:	96 e8       	ldi	r25, 0x86	; 134
 d52:	86 2f       	mov	r24, r22
 d54:	70 e0       	ldi	r23, 0x00	; 0
 d56:	60 e0       	ldi	r22, 0x00	; 0
 d58:	2a f0       	brmi	.+10     	; 0xd64 <__floatsisf+0x6c>
 d5a:	9a 95       	dec	r25
 d5c:	66 0f       	add	r22, r22
 d5e:	77 1f       	adc	r23, r23
 d60:	88 1f       	adc	r24, r24
 d62:	da f7       	brpl	.-10     	; 0xd5a <__floatsisf+0x62>
 d64:	88 0f       	add	r24, r24
 d66:	96 95       	lsr	r25
 d68:	87 95       	ror	r24
 d6a:	97 f9       	bld	r25, 7
 d6c:	08 95       	ret

00000d6e <__fp_cmp>:
 d6e:	99 0f       	add	r25, r25
 d70:	00 08       	sbc	r0, r0
 d72:	55 0f       	add	r21, r21
 d74:	aa 0b       	sbc	r26, r26
 d76:	e0 e8       	ldi	r30, 0x80	; 128
 d78:	fe ef       	ldi	r31, 0xFE	; 254
 d7a:	16 16       	cp	r1, r22
 d7c:	17 06       	cpc	r1, r23
 d7e:	e8 07       	cpc	r30, r24
 d80:	f9 07       	cpc	r31, r25
 d82:	c0 f0       	brcs	.+48     	; 0xdb4 <__fp_cmp+0x46>
 d84:	12 16       	cp	r1, r18
 d86:	13 06       	cpc	r1, r19
 d88:	e4 07       	cpc	r30, r20
 d8a:	f5 07       	cpc	r31, r21
 d8c:	98 f0       	brcs	.+38     	; 0xdb4 <__fp_cmp+0x46>
 d8e:	62 1b       	sub	r22, r18
 d90:	73 0b       	sbc	r23, r19
 d92:	84 0b       	sbc	r24, r20
 d94:	95 0b       	sbc	r25, r21
 d96:	39 f4       	brne	.+14     	; 0xda6 <__fp_cmp+0x38>
 d98:	0a 26       	eor	r0, r26
 d9a:	61 f0       	breq	.+24     	; 0xdb4 <__fp_cmp+0x46>
 d9c:	23 2b       	or	r18, r19
 d9e:	24 2b       	or	r18, r20
 da0:	25 2b       	or	r18, r21
 da2:	21 f4       	brne	.+8      	; 0xdac <__fp_cmp+0x3e>
 da4:	08 95       	ret
 da6:	0a 26       	eor	r0, r26
 da8:	09 f4       	brne	.+2      	; 0xdac <__fp_cmp+0x3e>
 daa:	a1 40       	sbci	r26, 0x01	; 1
 dac:	a6 95       	lsr	r26
 dae:	8f ef       	ldi	r24, 0xFF	; 255
 db0:	81 1d       	adc	r24, r1
 db2:	81 1d       	adc	r24, r1
 db4:	08 95       	ret

00000db6 <__fp_inf>:
 db6:	97 f9       	bld	r25, 7
 db8:	9f 67       	ori	r25, 0x7F	; 127
 dba:	80 e8       	ldi	r24, 0x80	; 128
 dbc:	70 e0       	ldi	r23, 0x00	; 0
 dbe:	60 e0       	ldi	r22, 0x00	; 0
 dc0:	08 95       	ret

00000dc2 <__fp_nan>:
 dc2:	9f ef       	ldi	r25, 0xFF	; 255
 dc4:	80 ec       	ldi	r24, 0xC0	; 192
 dc6:	08 95       	ret

00000dc8 <__fp_pscA>:
 dc8:	00 24       	eor	r0, r0
 dca:	0a 94       	dec	r0
 dcc:	16 16       	cp	r1, r22
 dce:	17 06       	cpc	r1, r23
 dd0:	18 06       	cpc	r1, r24
 dd2:	09 06       	cpc	r0, r25
 dd4:	08 95       	ret

00000dd6 <__fp_pscB>:
 dd6:	00 24       	eor	r0, r0
 dd8:	0a 94       	dec	r0
 dda:	12 16       	cp	r1, r18
 ddc:	13 06       	cpc	r1, r19
 dde:	14 06       	cpc	r1, r20
 de0:	05 06       	cpc	r0, r21
 de2:	08 95       	ret

00000de4 <__fp_round>:
 de4:	09 2e       	mov	r0, r25
 de6:	03 94       	inc	r0
 de8:	00 0c       	add	r0, r0
 dea:	11 f4       	brne	.+4      	; 0xdf0 <__fp_round+0xc>
 dec:	88 23       	and	r24, r24
 dee:	52 f0       	brmi	.+20     	; 0xe04 <__fp_round+0x20>
 df0:	bb 0f       	add	r27, r27
 df2:	40 f4       	brcc	.+16     	; 0xe04 <__fp_round+0x20>
 df4:	bf 2b       	or	r27, r31
 df6:	11 f4       	brne	.+4      	; 0xdfc <__fp_round+0x18>
 df8:	60 ff       	sbrs	r22, 0
 dfa:	04 c0       	rjmp	.+8      	; 0xe04 <__fp_round+0x20>
 dfc:	6f 5f       	subi	r22, 0xFF	; 255
 dfe:	7f 4f       	sbci	r23, 0xFF	; 255
 e00:	8f 4f       	sbci	r24, 0xFF	; 255
 e02:	9f 4f       	sbci	r25, 0xFF	; 255
 e04:	08 95       	ret

00000e06 <__fp_split3>:
 e06:	57 fd       	sbrc	r21, 7
 e08:	90 58       	subi	r25, 0x80	; 128
 e0a:	44 0f       	add	r20, r20
 e0c:	55 1f       	adc	r21, r21
 e0e:	59 f0       	breq	.+22     	; 0xe26 <__fp_splitA+0x10>
 e10:	5f 3f       	cpi	r21, 0xFF	; 255
 e12:	71 f0       	breq	.+28     	; 0xe30 <__fp_splitA+0x1a>
 e14:	47 95       	ror	r20

00000e16 <__fp_splitA>:
 e16:	88 0f       	add	r24, r24
 e18:	97 fb       	bst	r25, 7
 e1a:	99 1f       	adc	r25, r25
 e1c:	61 f0       	breq	.+24     	; 0xe36 <__fp_splitA+0x20>
 e1e:	9f 3f       	cpi	r25, 0xFF	; 255
 e20:	79 f0       	breq	.+30     	; 0xe40 <__fp_splitA+0x2a>
 e22:	87 95       	ror	r24
 e24:	08 95       	ret
 e26:	12 16       	cp	r1, r18
 e28:	13 06       	cpc	r1, r19
 e2a:	14 06       	cpc	r1, r20
 e2c:	55 1f       	adc	r21, r21
 e2e:	f2 cf       	rjmp	.-28     	; 0xe14 <__fp_split3+0xe>
 e30:	46 95       	lsr	r20
 e32:	f1 df       	rcall	.-30     	; 0xe16 <__fp_splitA>
 e34:	08 c0       	rjmp	.+16     	; 0xe46 <__fp_splitA+0x30>
 e36:	16 16       	cp	r1, r22
 e38:	17 06       	cpc	r1, r23
 e3a:	18 06       	cpc	r1, r24
 e3c:	99 1f       	adc	r25, r25
 e3e:	f1 cf       	rjmp	.-30     	; 0xe22 <__fp_splitA+0xc>
 e40:	86 95       	lsr	r24
 e42:	71 05       	cpc	r23, r1
 e44:	61 05       	cpc	r22, r1
 e46:	08 94       	sec
 e48:	08 95       	ret

00000e4a <__fp_zero>:
 e4a:	e8 94       	clt

00000e4c <__fp_szero>:
 e4c:	bb 27       	eor	r27, r27
 e4e:	66 27       	eor	r22, r22
 e50:	77 27       	eor	r23, r23
 e52:	cb 01       	movw	r24, r22
 e54:	97 f9       	bld	r25, 7
 e56:	08 95       	ret

00000e58 <__gesf2>:
 e58:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__fp_cmp>
 e5c:	08 f4       	brcc	.+2      	; 0xe60 <__gesf2+0x8>
 e5e:	8f ef       	ldi	r24, 0xFF	; 255
 e60:	08 95       	ret

00000e62 <__mulsf3>:
 e62:	0e 94 44 07 	call	0xe88	; 0xe88 <__mulsf3x>
 e66:	0c 94 f2 06 	jmp	0xde4	; 0xde4 <__fp_round>
 e6a:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__fp_pscA>
 e6e:	38 f0       	brcs	.+14     	; 0xe7e <__mulsf3+0x1c>
 e70:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__fp_pscB>
 e74:	20 f0       	brcs	.+8      	; 0xe7e <__mulsf3+0x1c>
 e76:	95 23       	and	r25, r21
 e78:	11 f0       	breq	.+4      	; 0xe7e <__mulsf3+0x1c>
 e7a:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__fp_inf>
 e7e:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <__fp_nan>
 e82:	11 24       	eor	r1, r1
 e84:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__fp_szero>

00000e88 <__mulsf3x>:
 e88:	0e 94 03 07 	call	0xe06	; 0xe06 <__fp_split3>
 e8c:	70 f3       	brcs	.-36     	; 0xe6a <__mulsf3+0x8>

00000e8e <__mulsf3_pse>:
 e8e:	95 9f       	mul	r25, r21
 e90:	c1 f3       	breq	.-16     	; 0xe82 <__mulsf3+0x20>
 e92:	95 0f       	add	r25, r21
 e94:	50 e0       	ldi	r21, 0x00	; 0
 e96:	55 1f       	adc	r21, r21
 e98:	62 9f       	mul	r22, r18
 e9a:	f0 01       	movw	r30, r0
 e9c:	72 9f       	mul	r23, r18
 e9e:	bb 27       	eor	r27, r27
 ea0:	f0 0d       	add	r31, r0
 ea2:	b1 1d       	adc	r27, r1
 ea4:	63 9f       	mul	r22, r19
 ea6:	aa 27       	eor	r26, r26
 ea8:	f0 0d       	add	r31, r0
 eaa:	b1 1d       	adc	r27, r1
 eac:	aa 1f       	adc	r26, r26
 eae:	64 9f       	mul	r22, r20
 eb0:	66 27       	eor	r22, r22
 eb2:	b0 0d       	add	r27, r0
 eb4:	a1 1d       	adc	r26, r1
 eb6:	66 1f       	adc	r22, r22
 eb8:	82 9f       	mul	r24, r18
 eba:	22 27       	eor	r18, r18
 ebc:	b0 0d       	add	r27, r0
 ebe:	a1 1d       	adc	r26, r1
 ec0:	62 1f       	adc	r22, r18
 ec2:	73 9f       	mul	r23, r19
 ec4:	b0 0d       	add	r27, r0
 ec6:	a1 1d       	adc	r26, r1
 ec8:	62 1f       	adc	r22, r18
 eca:	83 9f       	mul	r24, r19
 ecc:	a0 0d       	add	r26, r0
 ece:	61 1d       	adc	r22, r1
 ed0:	22 1f       	adc	r18, r18
 ed2:	74 9f       	mul	r23, r20
 ed4:	33 27       	eor	r19, r19
 ed6:	a0 0d       	add	r26, r0
 ed8:	61 1d       	adc	r22, r1
 eda:	23 1f       	adc	r18, r19
 edc:	84 9f       	mul	r24, r20
 ede:	60 0d       	add	r22, r0
 ee0:	21 1d       	adc	r18, r1
 ee2:	82 2f       	mov	r24, r18
 ee4:	76 2f       	mov	r23, r22
 ee6:	6a 2f       	mov	r22, r26
 ee8:	11 24       	eor	r1, r1
 eea:	9f 57       	subi	r25, 0x7F	; 127
 eec:	50 40       	sbci	r21, 0x00	; 0
 eee:	9a f0       	brmi	.+38     	; 0xf16 <__mulsf3_pse+0x88>
 ef0:	f1 f0       	breq	.+60     	; 0xf2e <__mulsf3_pse+0xa0>
 ef2:	88 23       	and	r24, r24
 ef4:	4a f0       	brmi	.+18     	; 0xf08 <__mulsf3_pse+0x7a>
 ef6:	ee 0f       	add	r30, r30
 ef8:	ff 1f       	adc	r31, r31
 efa:	bb 1f       	adc	r27, r27
 efc:	66 1f       	adc	r22, r22
 efe:	77 1f       	adc	r23, r23
 f00:	88 1f       	adc	r24, r24
 f02:	91 50       	subi	r25, 0x01	; 1
 f04:	50 40       	sbci	r21, 0x00	; 0
 f06:	a9 f7       	brne	.-22     	; 0xef2 <__mulsf3_pse+0x64>
 f08:	9e 3f       	cpi	r25, 0xFE	; 254
 f0a:	51 05       	cpc	r21, r1
 f0c:	80 f0       	brcs	.+32     	; 0xf2e <__mulsf3_pse+0xa0>
 f0e:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__fp_inf>
 f12:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__fp_szero>
 f16:	5f 3f       	cpi	r21, 0xFF	; 255
 f18:	e4 f3       	brlt	.-8      	; 0xf12 <__mulsf3_pse+0x84>
 f1a:	98 3e       	cpi	r25, 0xE8	; 232
 f1c:	d4 f3       	brlt	.-12     	; 0xf12 <__mulsf3_pse+0x84>
 f1e:	86 95       	lsr	r24
 f20:	77 95       	ror	r23
 f22:	67 95       	ror	r22
 f24:	b7 95       	ror	r27
 f26:	f7 95       	ror	r31
 f28:	e7 95       	ror	r30
 f2a:	9f 5f       	subi	r25, 0xFF	; 255
 f2c:	c1 f7       	brne	.-16     	; 0xf1e <__mulsf3_pse+0x90>
 f2e:	fe 2b       	or	r31, r30
 f30:	88 0f       	add	r24, r24
 f32:	91 1d       	adc	r25, r1
 f34:	96 95       	lsr	r25
 f36:	87 95       	ror	r24
 f38:	97 f9       	bld	r25, 7
 f3a:	08 95       	ret

00000f3c <__divmodsi4>:
 f3c:	05 2e       	mov	r0, r21
 f3e:	97 fb       	bst	r25, 7
 f40:	1e f4       	brtc	.+6      	; 0xf48 <__divmodsi4+0xc>
 f42:	00 94       	com	r0
 f44:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__negsi2>
 f48:	57 fd       	sbrc	r21, 7
 f4a:	07 d0       	rcall	.+14     	; 0xf5a <__divmodsi4_neg2>
 f4c:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__udivmodsi4>
 f50:	07 fc       	sbrc	r0, 7
 f52:	03 d0       	rcall	.+6      	; 0xf5a <__divmodsi4_neg2>
 f54:	4e f4       	brtc	.+18     	; 0xf68 <__divmodsi4_exit>
 f56:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__negsi2>

00000f5a <__divmodsi4_neg2>:
 f5a:	50 95       	com	r21
 f5c:	40 95       	com	r20
 f5e:	30 95       	com	r19
 f60:	21 95       	neg	r18
 f62:	3f 4f       	sbci	r19, 0xFF	; 255
 f64:	4f 4f       	sbci	r20, 0xFF	; 255
 f66:	5f 4f       	sbci	r21, 0xFF	; 255

00000f68 <__divmodsi4_exit>:
 f68:	08 95       	ret

00000f6a <__negsi2>:
 f6a:	90 95       	com	r25
 f6c:	80 95       	com	r24
 f6e:	70 95       	com	r23
 f70:	61 95       	neg	r22
 f72:	7f 4f       	sbci	r23, 0xFF	; 255
 f74:	8f 4f       	sbci	r24, 0xFF	; 255
 f76:	9f 4f       	sbci	r25, 0xFF	; 255
 f78:	08 95       	ret

00000f7a <__udivmodsi4>:
 f7a:	a1 e2       	ldi	r26, 0x21	; 33
 f7c:	1a 2e       	mov	r1, r26
 f7e:	aa 1b       	sub	r26, r26
 f80:	bb 1b       	sub	r27, r27
 f82:	fd 01       	movw	r30, r26
 f84:	0d c0       	rjmp	.+26     	; 0xfa0 <__udivmodsi4_ep>

00000f86 <__udivmodsi4_loop>:
 f86:	aa 1f       	adc	r26, r26
 f88:	bb 1f       	adc	r27, r27
 f8a:	ee 1f       	adc	r30, r30
 f8c:	ff 1f       	adc	r31, r31
 f8e:	a2 17       	cp	r26, r18
 f90:	b3 07       	cpc	r27, r19
 f92:	e4 07       	cpc	r30, r20
 f94:	f5 07       	cpc	r31, r21
 f96:	20 f0       	brcs	.+8      	; 0xfa0 <__udivmodsi4_ep>
 f98:	a2 1b       	sub	r26, r18
 f9a:	b3 0b       	sbc	r27, r19
 f9c:	e4 0b       	sbc	r30, r20
 f9e:	f5 0b       	sbc	r31, r21

00000fa0 <__udivmodsi4_ep>:
 fa0:	66 1f       	adc	r22, r22
 fa2:	77 1f       	adc	r23, r23
 fa4:	88 1f       	adc	r24, r24
 fa6:	99 1f       	adc	r25, r25
 fa8:	1a 94       	dec	r1
 faa:	69 f7       	brne	.-38     	; 0xf86 <__udivmodsi4_loop>
 fac:	60 95       	com	r22
 fae:	70 95       	com	r23
 fb0:	80 95       	com	r24
 fb2:	90 95       	com	r25
 fb4:	9b 01       	movw	r18, r22
 fb6:	ac 01       	movw	r20, r24
 fb8:	bd 01       	movw	r22, r26
 fba:	cf 01       	movw	r24, r30
 fbc:	08 95       	ret

00000fbe <_exit>:
 fbe:	f8 94       	cli

00000fc0 <__stop_program>:
 fc0:	ff cf       	rjmp	.-2      	; 0xfc0 <__stop_program>
